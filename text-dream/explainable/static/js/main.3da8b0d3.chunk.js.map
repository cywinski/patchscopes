{"version":3,"sources":["components/reconstruct/ReconstructSentence.js","components/glyph/GlyphComponent.js","colors/index.js","glyphs/index.js","components/cards/bodies/DreamBodyComponent.js","components/cards/heads/DreamHeadComponent.js","data/VisExplanationTexts.js","components/legend/LegendItemComponent.js","components/legend/LegendComponent.js","components/cards/heads/ExplanationHeadComponent.js","components/cards/heads/SelectionHeadComponent.js","sentences/index.js","data/Constants.js","components/cards/DreamComponent.js","components/cards/heads/ReconstructHeadComponent.js","components/cards/bodies/ReconstructBodyComponent.js","components/cards/ReconstructComponent.js","components/cards/heads/ShiftedReconstructHeadComponent.js","components/cards/bodies/MagnitudesBodyComponent.js","components/cards/bodies/ShiftedReconstructBodyComponent.js","components/cards/LayersComponent.js","cardcontentprocessing/index.js","components/cards/MagnitudesComponent.js","components/cards/ShiftedReconstructComponent.js","components/cards/heads/TopWordsHeadComponent.js","components/cards/bodies/TopWordsBodyComponent.js","components/cards/TopWordsComponent.js","components/cards/bodies/SimilarEmbeddingsBodyComponent.js","components/cards/SimilarEmbeddingsComponent.js","components/cards/bodies/TokenSearchBodyComponent.js","components/cards/TokenSearchComponent.js","cardprocessing/index.js","api/DreamApi.js","actions/index.js","actions/types.js","components/TopBarComponent.js","components/ProgressComponent.js","components/views/headings/GenericHeading.js","components/views/texts/FeatureVisText.js","components/views/texts/TextSpecialtyText.js","components/views/texts/BertResultsText.js","components/views/texts/DreamVisText.js","components/views/texts/AnnealingVisText.js","components/views/texts/TopWordsVisText.js","components/views/texts/SimilarVisText.js","components/views/texts/ReconstructVisText.js","components/views/texts/ShiftVisText.js","components/views/texts/ConclusionVisText.js","components/views/buttons/FeatureVisButtons.js","components/views/buttons/BothButtons.js","components/views/buttons/ConclusionButtons.js","components/views/illustrations/FeatureVisIllustration.js","components/cards/SoftmaxComponent.js","components/views/illustrations/TextSpecialtyIllustration.js","components/views/illustrations/DreamVisIllustration.js","data/ExperimentExplanationTexts.js","components/views/illustrations/AnnealingVisIllustration.js","components/views/illustrations/TopWordsVisIllustration.js","components/views/illustrations/SimilarVisIllustration.js","components/views/illustrations/ReconstructVisIllustration.js","components/views/illustrations/ShiftVisIllustration.js","data/ViewData.js","components/ViewStepComponent.js","AppRouter.js","reducers/initialState.js","reducers/index.js","reducers/CardDimensionsReducer.js","reducers/SoftmaxReducer.js","reducers/ProgressReducer.js","reducers/TopWordsIterationReducer.js","reducers/DreamIDReducer.js","reducers/DreamJSONReducer.js","reducers/AnnealingJSONReducer.js","reducers/TopWordsJSONReducer.js","reducers/SimilarWordsJSONReducer.js","reducers/ReconstructionJSONReducer.js","reducers/ShiftJSONReducer.js","App.js","registerServiceWorker.js","index.js"],"names":["ReconstructSentence","words","this","props","sentence","slice","colors","i","target","parseInt","push","original","Grid","container","direction","spacing","className","map","word","index","item","key","Typography","variant","style","color","React","Component","GlyphComponent","extremeDiff","extremes","max","min","varPath","value","width","height","id","d","stroke","fill","green","red","blue","grey","orange","getColor","type","iterationsToGlyphsParams","iterations","glyphsParams","Object","prototype","hasOwnProperty","call","iterationsToTypeParams","maxLoss","Math","maxActivation","iteration","magnitudesToTypeParams","magnitudes","magnitude","lastIteration","results","length","DreamBody","glyphs","wrap","Tooltip","title","placement","sentenceParams","itWidth","number","keys","idx","toFixed","tokens","DreamHead","Paper","backgroundColor","square","alignItems","headWidth","params","explanationTexts","Dream","TopWords","TokenSearch","SimilarEmbeddings","Reconstruct","Shift","LegendItem","paddingRight","marginRight","Legend","includes","element","ExplanationHead","filteredParams","visTitle","topic","replace","connect","dispatch","actions","bindActionCreators","SelectionHead","buttons","Button","dreamID","onClick","clickHandler","options","justify","button","state","ownProps","getDreamSentenceParams","toString","dream_start","dream_end","getReconstructSentenceParams","getShiftSentenceParams","changedSentence","shift_start","shift_end","getClosestResult","bestSentence","bestScore","mag","score","sentences","headParams","layer_id","word_id","neuron_id","explanation","elementIndex","handleClick","bind","changeDream","PureComponent","ReconstructHead","reconstructBody","ShiftedReconstructHead","MagnitudesBody","sort","a","b","shift_magnitude","firstIteration","ShiftedReconstructBody","Layers","layers","bodies","layerIDs","head","layer","getDreamProps","getReconstructProps","getMagnitudesLayerProps","body","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","changeReconstruction","changeShiftedReconstruction","Magnitudes","magnitudeValues","getMagnitudesProps","ShiftedReconstruct","TopWordsHead","handleSliderChange","event","newValue","changeTopWordsIteration","handleInputChange","Number","xs","Slider","onChange","maxIterations","aria-labelledby","paddingLeft","Input","margin","inputProps","TopWordsBody","drawGraph","prevProps","JSON","stringify","cardDimensions","updateGraph","sideSubstitute","vertSubstitute","currentResults","dreamingElement","xScale","d3","domain","range","yScale","padding","yAxis","svg","graphParams","setupGraphParams","select","remove","xAxis","mainGroup","append","attr","selectAll","data","scores","enter","_","bandwidth","exit","topWordsIteration","activation","tokenID","changeAnnealing","SimilarEmbeddingsBodyComponent","tops","splice","minActivation","top","xScaleActivation","xScaleDistance","furthest","token","text","distance","change_word","changeSimilarWords","TokenSearchBodyComponent","changeTopWords","elementTypes","getCard","dreamingCard","TopWordsComponent","DreamApi","identifier","fetchData","request","Request","process","method","fetch","then","response","json","catch","error","addDreamingElement","updateDreamingElements","elements","removeDreamingElement","changeDreamingElementIteration","changeCardDimensions","dimensions","changeSoftmaxStatus","status","changeProgressPage","page","changeDreamID","changeDreamSuccess","loadDream","getDreamJSON","changeAnnealingSuccess","loadAnnealing","getAnnealingJSON","changeTopWordsSuccess","loadTopWords","getTopWordsJSON","changeSimilarWordsSuccess","loadSimilarWords","getSimilarWordsJSON","changeReconstructionSuccess","loadReconstruction","getReconstructionJSON","changeShiftedReconstructionSuccess","loadShiftedReconstruction","getShiftedReconstructionJSON","TopBar","addElement","files","file","reader","window","FileReader","onload","action","e","parse","result","readAsText","onInputClick","AppBar","position","Toolbar","href","IconButton","aria-label","Progress","LinearProgress","progress","of","GenericHeading","FeatureVisTexts","classes","expanded","TextSpecialtyTexts","Context","input","Node","inline","BertResultsTexts","DreamVisTexts","to","AnnealingVisTexts","TopWordsVisTexts","SimilarVisTexts","ReconstructVisTexts","ShiftVisTexts","ConclusionVisTexts","FeatureVisButtons","endIcon","BothButtons","prev","next","FeatureVisIllustration","src","alt","Softmax","handleChange","val","softmaxStatus","temperature","arr","temp","C","y","exp","reduce","round","EPSILON","softmaxed","softmaxTemp","values","tempered","step","valueLabelDisplay","TextField","label","labels","isNaN","parseFloat","TextSpecialtyIllustration","DreamVisIllustration","dreamVisJSON","AnnealingVisIllustration","cardElement","document","getElementById","getBoundingClientRect","annealingCard","annealingVisJSON","TopWordsVisIllustration","topWordsCard","topWordsVisJSON","SimilarVisIllustration","similarCard","similarVisJSON","ReconstructVisIllustration","reconstructCard","reconstructVisJSON","ShiftVisIllustration","shiftCard","shiftVisJSON","viewData","heading","texts","FeatureVisText","illustration","TextSpecialtyText","BertResultsText","DreamVisText","AnnealingVisText","TopWordsVisText","SimilarVisText","ReconstructVisText","ShiftVisText","ConclusionVisText","ConclusionButtons","ViewStep","content","AppRouter","basename","exact","path","match","CSSTransition","in","timeout","classNames","unmountOnExit","combineReducers","initialState","dims","store","createStore","combinedReducers","applyMiddleware","thunk","theme","createMuiTheme","palette","primary","light","main","dark","secondary","typography","useNextVariants","App","CssBaseline","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","URL","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3da8b0d3.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography} from '@material-ui/core';\n\n/**\n * Provides a component for displaying sentences in other Components.\n */\nclass ReconstructSentence extends React.Component {\n  /**\n   * Renders a component to display sentences in other components.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const words = this.props.sentence.slice(1, -1);\n    const colors = [];\n\n    for (const i in words) {\n      if (words[i] === this.props.target[parseInt(i) + 1]) {\n        colors.push(this.props.colors[0]);\n      } else if (words[i] === this.props.original[parseInt(i) + 1]) {\n        colors.push(this.props.colors[1]);\n      } else {\n        colors.push(this.props.colors[2]);\n      }\n    }\n\n    return (\n      <Grid container direction='row' spacing={1} className='mainGrid'>\n        {words.map((word, index) =>\n          <Grid item key={index}>\n            <Typography variant=\"body2\" style={{color: colors[index]}}>\n              {word}\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nReconstructSentence.propTypes = {\n  sentence: PropTypes.array.isRequired,\n  target: PropTypes.array.isRequired,\n  original: PropTypes.array.isRequired,\n  colors: PropTypes.array.isRequired,\n};\n\nexport default ReconstructSentence;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Providing a Component representing a small glyph used for activation/loss/...\n * visualization.\n */\nclass GlyphComponent extends React.Component {\n  /**\n   * Renders the glyph component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const glyphWidth = 10;\n    const glyphHeight = 20;\n    const extremeDiff = this.props.extremes.max - this.props.extremes.min;\n    const yPos = glyphHeight * (1 - ((this.props.value -\n        this.props.extremes.min) / extremeDiff));\n    const varPath = 'M 0 ' + glyphHeight + ' H ' + glyphWidth + ' V ' +\n        (yPos) + ' H ' + (-glyphWidth) + ' Z';\n    const leftPath = 'M 0 0 V ' + glyphHeight;\n    return (\n      <svg width={glyphWidth} height={glyphHeight} id='glyphsSVG'>\n        <g>\n          <path d={varPath} stroke={this.props.color} fill={this.props.color}/>\n          <path d={leftPath} stroke=\"black\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nGlyphComponent.propTypes = {\n  value: PropTypes.number.isRequired,\n  extremes: PropTypes.object.isRequired,\n  color: PropTypes.string.isRequired,\n};\n\nexport default GlyphComponent;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport {red, green, blue, orange, grey} from '@material-ui/core/colors';\n\nconst colors = {\n  'activation': green[500],\n  'ids_activation': green[200],\n  'loss': red[500],\n  'ids_loss': red[300],\n  'temperature': blue[500],\n  'distance': grey[500],\n  'softmax': orange[500],\n};\n\n/**\n * Used throughout the application to get the color for a specific type.\n *\n * @param {string} type - the type of the visualization to get the color for.\n * @param {number} shade - the shade version of the desired color.\n * @return {object} the color code for the requested color type.\n */\nexport function getColor(type) {\n  return colors[type];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport {getColor} from '../colors';\n\n/**\n * Converts iteration results to glyph parameters.\n *\n * @param {array} iterations - the iterations that are to be converted.\n * @return {object} the glyph params obtained from the iterations.\n */\nexport function iterationsToGlyphsParams(iterations) {\n  const glyphsParams = {};\n  if (Object.prototype.hasOwnProperty.call(iterations[0], 'temperature')) {\n    iterationsToTypeParams(glyphsParams, iterations, 'temperature');\n    glyphsParams['temperature'].color = getColor('temperature');\n  }\n  if (Object.prototype.hasOwnProperty.call(iterations[0], 'loss')) {\n    iterationsToTypeParams(glyphsParams, iterations, 'loss');\n    glyphsParams['loss'].color = getColor('loss');\n    if (Object.prototype.hasOwnProperty.call(iterations[0], 'ids_loss')) {\n      iterationsToTypeParams(glyphsParams, iterations, 'ids_loss');\n      glyphsParams['ids_loss'].color = getColor('ids_loss');\n      const maxLoss = Math.max(glyphsParams['loss'].extremes.max,\n          glyphsParams['ids_loss'].extremes.max);\n      glyphsParams['loss'].extremes.max = maxLoss;\n      glyphsParams['ids_loss'].extremes.max = maxLoss;\n    }\n  }\n  if (Object.prototype.hasOwnProperty.call(iterations[0], 'activation')) {\n    iterationsToTypeParams(glyphsParams, iterations, 'activation');\n    glyphsParams['activation'].color = getColor('activation');\n    if (Object.prototype.hasOwnProperty.call(iterations[0], 'ids_activation')) {\n      iterationsToTypeParams(glyphsParams, iterations, 'ids_activation');\n      glyphsParams['ids_activation'].color = getColor('ids_activation');\n      const maxActivation = Math.max(glyphsParams['activation'].extremes.max,\n          glyphsParams['ids_activation'].extremes.max);\n      glyphsParams['activation'].extremes.max = maxActivation;\n      glyphsParams['ids_activation'].extremes.max = maxActivation;\n    }\n  }\n  return glyphsParams;\n}\n\n/**\n * Convert iterations to typed params and store them in glyphParams.\n *\n * @param {object} glyphsParams - the glyph parameters that hold all the results\n * for the conversion of iterations.\n * @param {array} iterations - the iterations for which to convert the params.\n * @param {string} type - the type of the param to be converted.\n */\nfunction iterationsToTypeParams(glyphsParams, iterations, type) {\n  glyphsParams[type] = {\n    iterations: [],\n    extremes: {max: 0, min: 0},\n  };\n  for (const iteration of iterations) {\n    glyphsParams[type].iterations.push(iteration[type]);\n    if (glyphsParams[type].extremes.max < iteration[type]) {\n      glyphsParams[type].extremes.max = iteration[type];\n    }\n  }\n}\n\n/**\n * Converts magnitude results to glyph parameters.\n *\n * @param {array} magnitudes - the magnitudes that are to be converted.\n * @return {object} the glyph params obtained from the iterations.\n */\nexport function magnitudesToGlyphsParams(magnitudes) {\n  const glyphsParams = {};\n  const firstIteration = magnitudes[0].results.iterations[0];\n  if (Object.prototype.hasOwnProperty.call(firstIteration, 'loss')) {\n    magnitudesToTypeParams(glyphsParams, magnitudes, 'loss');\n    glyphsParams['loss'].color = getColor('loss');\n  }\n  if (Object.prototype.hasOwnProperty.call(firstIteration, 'ids_loss')) {\n    magnitudesToTypeParams(glyphsParams, magnitudes, 'ids_loss');\n    glyphsParams['ids_loss'].color = getColor('ids_loss');\n  }\n  return glyphsParams;\n}\n\n/**\n * Convert magnitudes to typed params and store them in glyphParams.\n *\n * @param {object} glyphsParams - the glyph parameters that hold all the results\n * for the conversion of iterations.\n * @param {array} magnitudes - the magnitudes for which to convert the params.\n * @param {string} type - the type of the param to be converted.\n */\nfunction magnitudesToTypeParams(glyphsParams, magnitudes, type) {\n  glyphsParams[type] = {\n    magnitudes: [],\n    extremes: {max: 0, min: 0},\n  };\n  for (const magnitude of magnitudes) {\n    const lastIteration = magnitude.results.iterations[\n        magnitude.results.iterations.length - 1];\n    glyphsParams[type].magnitudes.push(lastIteration[type]);\n    for (const iteration of magnitude.results.iterations) {\n      if (glyphsParams[type].extremes.max < iteration[type]) {\n        glyphsParams[type].extremes.max = iteration[type];\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\nimport GlyphComponent from '../../glyph/GlyphComponent';\n\nimport * as glyphs from '../../../glyphs';\n\n/**\n * Provides a Body Component for the Dreaming Card.\n */\nclass DreamBody extends React.Component {\n  /**\n   * Renders the Component.\n   *\n   * @return {jsx} The component to be rendered.\n   */\n  render() {\n    const iterations = this.props.results.iterations;\n    const glyphsParams = glyphs.iterationsToGlyphsParams(iterations);\n    return (\n      <Grid container direction='column' spacing={2} wrap='nowrap'>\n        {iterations.map((iteration, index) =>\n          <Grid item key={index}>\n            <Grid container direction='row' spacing={1}>\n              <Tooltip title=\"Iteration Number\" placement=\"top\">\n                <Grid item style={{width: this.props.sentenceParams.itWidth}}>\n                  <Typography variant=\"caption\" color=\"inherit\">\n                    {iteration.number}\n                  </Typography>\n                </Grid>\n              </Tooltip>\n              <Grid item>\n                <Grid container direction='row' spacing={0}>\n                  {Object.keys(glyphsParams).map((key, idx) =>\n                    <Tooltip\n                      title={key + ': ' +\n                          glyphsParams[key].iterations[\n                              index].toFixed(4)}\n                      placement=\"top\" key={idx}>\n                      <Grid item>\n                        <GlyphComponent\n                          value={glyphsParams[key].iterations[index]}\n                          extremes={glyphsParams[key].extremes}\n                          color={glyphsParams[key].color}/>\n                      </Grid>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item>\n                <ReconstructSentence sentence={iteration.tokens}\n                  target={this.props.sentenceParams.target}\n                  original={this.props.sentenceParams.target}\n                  colors={this.props.sentenceParams.colors}/>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nDreamBody.propTypes = {\n  results: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default DreamBody;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip, Paper} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\n\n/**\n * Providing a Heading Component for Dreaming Cards.\n */\nclass DreamHead extends React.Component {\n  /**\n   * Renders the heading component.\n   *\n   * @return {jsx} the heading component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item>\n        <Paper className='subHeadingPaper' style={{backgroundColor: '#DDDDDD'}}\n          square>\n          <Grid container direction='row' spacing={1} alignItems=\"center\" wrap='nowrap'>\n            <Tooltip title=\"Input Sentence\" placement=\"top\">\n              <Grid item style={{width: this.props.sentenceParams.headWidth}}>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  I\n                </Typography>\n              </Grid>\n            </Tooltip>\n            <Grid item>\n              <ReconstructSentence\n                sentence={this.props.params.tokens}\n                target={this.props.sentenceParams.target}\n                original={this.props.sentenceParams.target}\n                colors={this.props.sentenceParams.colors}/>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nDreamHead.propTypes = {\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default DreamHead;\n","import React from 'react';\n\n/**\n * Returns the explanation text for a given visualization.\n *\n * @param {*} visTitle the title of the visualization the text is requeste for.\n * @return {string} the helper text fot this visualization component.\n */\nexport default function getVisExplanation(visTitle) {\n  return explanationTexts[visTitle];\n}\n\nconst explanationTexts = {\n  Dream:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Dream Visualization</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        Here, you can see how the dreaming process changes its predictions over\n        the course of many iterations.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top, you can see which layer, word, and neuron was maximized for.\n        Below that, you see the sentence that we started the process with.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        Iteration numbers are written on the left, next to a small plot showing\n        the temperature in blue, the activation of the softmax combination in\n        dark green, and the activation when taking only the word with the\n        highest softmax value in light green.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        The sentences for each row show the words with the highest softmax value\n        for each iteration.\n        Black words are fixed, while blue words can be changed by the model.\n      </span>\n    </div>,\n  TopWords:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Annealing Visualization</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        This visualization shows how the softmax distribution changes over the\n        training process.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top, you can see which layer, word, and neuron was maximized for.\n        Below that, you see the sentence that we started the process with.\n        The blue word marks for which word the annealing process is visualized\n        here.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        With the iteration slider, you can change the iteration for which the\n        softmax distribution is currently displayed.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        The graph below this shows the words with the highest softmax values for\n        the selected iteration.\n      </span>\n    </div>,\n  TokenSearch:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Token Search Visualization</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        This visualization shows the words for a given position that lead to the\n        highest activation of the selected neuron.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top, you can see which layer, word, and neuron was maximized for.\n        Below that, you see the sentence that we started the process with.\n        The blue word marks the position for which we searched for the most\n        activating words.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        The graph below shows the words which lead to the highest activation\n        values.\n        The numbers on the bars represent the activation that this word leads\n        to.\n      </span>\n    </div>,\n  SimilarEmbeddings:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Similar Words Activations</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        Here you can see the activations for words that are close to the\n        highlighted words in embedding space.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top, you can see which layer, word, and neuron was maximized for.\n        Below that, you see the sentence that we started the process with.\n        The blue word marks the position for which we looked up the activation\n        of similar words.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        The graph below shows the most similar words alongside their activation\n        values.\n        Green bars represent the activation of the word, while grey bars show\n        the distance in embedding space.\n      </span>\n    </div>,\n  Reconstruct:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Reconstructing Activations</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        In this visualization, we show the results of an experiment where we try\n        to reconstruct activations of a sentence that we previously recorded.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top, we show the sentence for which we recorded activation\n        values.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        Below that, you can see the reuslts of this reconstruction process for\n        each layer in the model.\n        Green words are words that were reconstructed correctly, while red words\n        differ from the original sentence.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        To get even more insights, you can also click on one of the layers,\n        which shows how the reconstruction process evolved over many iterations.\n        Here, we show the iteration number next to a small graph.\n        For this graph, the blue bar shows the temperature value for this\n        iteration, while the dark red bar shows the loss between the activation\n        of the softmax combination of tokens and the target activation.\n        The light red bar shows the loss if we were to only look at the\n        top-ranked word at each position.\n      </span>\n    </div>,\n  Shift:\n    <div className='tooltipDiv'>\n      <span className='styledTooltip'><b>Shifting Activations</b></span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        At the top of this visualization, we show the sentence for which we\n        recorded activation values.\n        Below that, you can see the change we wanted to force the model into.\n        Only the activation value for the green word is changed in this process.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        We applied this change to all the layers in the model.\n        For each layer, we show the result that came closest to the target\n        sentence of this change.\n        Black words are words that did not change from the original sentence,\n        if a word is green, the shift was successful, and if a word is red, it\n        has been changed to something we did not intend it to change to.\n      </span>\n      <br></br>\n      <br></br>\n      <span className='styledTooltip'>\n        To get even more insights, you can also click on one of the layers,\n        which shows results for different magnitudes of this activation shift.\n        We show this magnitude as a number on the left of each row.\n        Next to it is the loss graph, where a dark red bar shows the loss\n        between the activation of the softmax combination of tokens and the\n        target activation, whereas the light red bar shows the loss if we were\n        to only look at the top-ranked word at each position.\n      </span>\n    </div>,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography} from '@material-ui/core';\n\nimport {getColor} from '../../colors';\n\n/**\n * Providing a Legend to resolve the color scheme.\n */\nclass LegendItem extends React.Component {\n  /**\n   * Renders the legend component to resolve the used colors.\n   *\n   * @return {jsx} the legend to be rendered.\n   */\n  render() {\n    return (\n      <Grid item container alignItems='center' wrap='nowrap'\n        style={{paddingRight: '15px'}}>\n        <svg width={10} height={10} id='glyphsSVG' style={{marginRight: '5px'}}>\n          <rect width=\"10\" height=\"10\" fill={getColor(this.props.color)} />\n        </svg>\n        <Typography variant=\"caption\" color=\"inherit\">\n          {this.props.color}\n        </Typography>\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nLegendItem.propTypes = {\n  color: PropTypes.string.isRequired,\n};\n\nexport default LegendItem;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport LegendItem from './LegendItemComponent';\nimport {Grid} from '@material-ui/core';\n\n/**\n * Providing a Legend to resolve the color scheme.\n */\nclass Legend extends React.Component {\n  /**\n   * Renders the legend component to resolve the used colors.\n   *\n   * @return {jsx} the legend to be rendered.\n   */\n  render() {\n    // Get all unique colors of all used colors\n    const colors = [];\n    for (const color of this.props.colors) {\n      if (!colors.includes(color)) {\n        colors.push(color);\n      }\n    }\n    return (\n      <Grid item container wrap='nowrap' style={{width: 'auto'}}>\n        {colors.map((element, index) =>\n          <LegendItem color={element} key={index}/>\n        )}\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nLegend.propTypes = {\n  colors: PropTypes.array.isRequired,\n};\n\nexport default Legend;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Typography, Paper, Tooltip} from '@material-ui/core';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport * as actions from '../../../actions';\nimport getVisExplanation from '../../../data/VisExplanationTexts';\nimport Legend from '../../legend/LegendComponent';\n\n/**\n * Providing a Header Component for any Card.\n */\nclass ExplanationHead extends React.Component {\n  /**\n   * Renders the general header.\n   *\n   * @return {jsx} the header to be rendered.\n   */\n  render() {\n    let keys = Object.keys(this.props.params);\n    const filteredParams = {};\n    for (const key of keys) {\n      if (this.props.params[key] !== null) {\n        filteredParams[key] = this.props.params[key];\n      }\n    }\n    keys = Object.keys(filteredParams);\n    let topic = this.props.topic;\n    if (topic === 'Top Words') {\n      topic = 'Annealing';\n    }\n    return (\n      <Grid item>\n        <Paper className='headingPaper' square>\n          <Grid container direction='row' spacing={0} alignItems=\"center\"\n            wrap='nowrap'>\n            <Grid item container direction='row' spacing={1}\n              alignItems=\"center\">\n              <Grid item>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  {topic}\n                </Typography>\n              </Grid>\n              {keys.map((key, index) =>\n                <Grid item key={index}>\n                  <Typography variant=\"caption\" color=\"inherit\">\n                    {key}: {this.props.params[key]}\n                  </Typography>\n                </Grid>\n              )}\n            </Grid>\n            <Legend colors={this.props.colors ? this.props.colors : []}>\n            </Legend>\n            <Grid item>\n              <Tooltip title={\n                getVisExplanation(this.props.topic.replace(' ', ''))}>\n                <HelpOutlineIcon className='tooltipIcon'/>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nExplanationHead.propTypes = {\n  topic: PropTypes.string.isRequired,\n  params: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  colors: PropTypes.array,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ExplanationHead);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Button} from '@material-ui/core';\n\n/**\n * Providing a run Selection Component for any Card.\n */\nclass SelectionHead extends React.Component {\n  /**\n   * Renders the general header.\n   *\n   * @return {jsx} the header to be rendered.\n   */\n  render() {\n    let buttons = [];\n    for (let i = 0; i < this.props.options; i++) {\n      buttons.push(\n        <Grid item key={i}>\n          <Button variant='contained' className='runButton'\n            color={(i+1) === this.props.dreamID ? 'primary' : 'secondary'} \n            onClick={() => this.props.clickHandler(i+1)}>\n            {i+1}\n          </Button>\n        </Grid>\n      )\n    }\n    return (\n      <Grid item className='selectionHead'>\n        <Grid container direction='row' spacing={2} alignItems=\"center\"\n          justify='center'>\n          {buttons.map((button) => \n            button\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nSelectionHead.propTypes = {\n  dreamID: PropTypes.number.isRequired,\n  options: PropTypes.number.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n  };\n}\n\nexport default connect(mapStateToProps, null)(SelectionHead);","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\n/**\n * Get the params needed for rendering a dream sentence.\n *\n * @param {object} results - the results of the dreaming experiment.\n * @param {object} params - the parameters for the experiment.\n * @return {object} the parameters needed to render the dream sentence.\n */\nexport function getDreamSentenceParams(results, params) {\n  const iterations = results.iterations;\n  const itWidth = 8 * (iterations[\n      iterations.length - 1].number.toString().length + 1);\n  const headWidth = itWidth + 24;\n  const sentenceColors = ['black', 'black', 'blue'];\n  const target = [...params.tokens];\n  for (const i in target) {\n    if (params.dream_start <= i && params.dream_end >= i) {\n      target[i] = '';\n    }\n  }\n  return {\n    'itWidth': itWidth,\n    'headWidth': headWidth,\n    'colors': sentenceColors,\n    'target': target,\n    'original': [...params.tokens],\n  };\n}\n\n/**\n * Get the params needed for rendering a reconstruct sentence.\n *\n * @param {object} results - the results of the reconstruct experiment.\n * @param {object} params - the parameters for the experiment.\n * @return {object} the parameters needed to render the reconstruct sentence.\n */\nexport function getReconstructSentenceParams(results, params) {\n  const iterations = results.iterations;\n  const itWidth = 8 * (iterations[\n      iterations.length - 1].number.toString().length + 1);\n  const headWidth = itWidth + 24;\n  const sentenceColors = ['green', 'black', 'red'];\n  const target = [...params.tokens];\n  for (const i in target) {\n    if (params.dream_start > i || params.dream_end < i) {\n      target[i] = '';\n    }\n  }\n  return {\n    'itWidth': itWidth,\n    'headWidth': headWidth,\n    'colors': sentenceColors,\n    'target': target,\n    'original': [...params.tokens],\n  };\n}\n\n/**\n * Get the params needed for rendering a shifted reconstruct sentence.\n *\n * @param {object} results - the results of the shifted reconstruct experiment.\n * @param {object} params - the parameters for the experiment.\n * @return {object} the parameters needed to render the shifted reconstruct\n * sentence.\n */\nexport function getShiftSentenceParams(results, params) {\n  const iterations = results.iterations;\n  const itWidth = 8 * (iterations[\n      iterations.length - 1].number.toString().length + 1);\n  const headWidth = itWidth + 24;\n  const sentenceColors = ['green', 'black', 'red'];\n  const target = [...params.tokens];\n  const changedSentence = [...params.tokens];\n  for (const i in target) {\n    if (params.shift_start >= i && params.shift_end <= i) {\n      target[i] = params.target;\n      changedSentence[i] = params.target;\n    } else {\n      target[i] = '';\n    }\n  }\n  return {\n    'itWidth': itWidth,\n    'headWidth': headWidth,\n    'colors': sentenceColors,\n    'target': target,\n    'changedSentence': changedSentence,\n    'original': [...params.tokens],\n  };\n}\n\n/**\n * Used for getting the result of multiple magnitudes that comes closest to the\n * target.\n *\n * @param {array} changedSentence - the sentence target with some tokens\n * changed.\n * @param {array} magnitudes - the results for all the different magnitudes.\n * @return {array} the sentence that gets closest to the target.\n */\nexport function getClosestResult(changedSentence, magnitudes) {\n  let bestSentence = magnitudes[0].results.iterations[\n      magnitudes[0].results.iterations.length - 1].sentence;\n  let bestScore = 0;\n  for (const mag of magnitudes) {\n    let score = 0;\n    for (const word in changedSentence) {\n      if (mag.results.iterations[mag.results.iterations.length - 1].tokens[\n          word] === changedSentence[word]) {\n        score = score + 1;\n      }\n    }\n    if (score > bestScore) {\n      bestScore = score;\n      bestSentence = mag.results.iterations[\n          mag.results.iterations.length - 1].tokens;\n    }\n  }\n  return bestSentence;\n}\n","export const numOptions = 3;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport DreamBody from './bodies/DreamBodyComponent';\nimport DreamHead from './heads/DreamHeadComponent';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport SelectionHead from './heads/SelectionHeadComponent';\n\nimport * as sentences from '../../sentences';\nimport * as actions from '../../actions';\nimport * as constants from '../../data/Constants';\n\n/**\n * Provides the Dream Card Component.\n */\nclass Dream extends React.PureComponent {\n  /**\n   * Renders the Dream Card.\n   *\n   * @return {jsx} the dream card to be rendered\n   */\n  render() {\n    const sentenceParams = sentences.getDreamSentenceParams(\n        this.props.results, this.props.params);\n    const headParams = {\n      'LayerID': this.props.params.layer_id,\n      'WordID': this.props.params.word_id,\n      'NeuronID': this.props.params.neuron_id,\n    };\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'\n        justify='center'>\n        <Grid item className='explanationItem'>\n          <p className='normalText'>\n            <b>Experiment {this.props.dreamID}: </b>{this.props.explanation}\n          </p>\n        </Grid>\n        <ExplanationHead\n          topic=\"Dream\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        <DreamHead\n          params={this.props.params}\n          sentenceParams={sentenceParams}/>\n        <div className='overflow bottomMargin'>\n          <Paper className={'dreamPaper'}>\n            <DreamBody\n              results={this.props.results}\n              params={this.props.params}\n              sentenceParams={sentenceParams}/>\n          </Paper>\n        </div>\n        <SelectionHead\n          options={constants.numOptions}\n          clickHandler={this.handleClick.bind(this)}/>\n      </Grid>\n    );\n  }\n\n  /**\n   * Handles the selection of a different dreaming experiment.\n   *\n   * @param {number} index The index of the selected item.\n   */\n  handleClick(index) {\n    this.props.actions.changeDream(index);\n  }\n}\n\nDream.propTypes = {\n  params: PropTypes.object.isRequired,\n  results: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  explanation: PropTypes.string.isRequired,\n  colors: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dream);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip, Paper} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\n\n/**\n * Providing a header component for Reconstruct experiments.\n */\nclass ReconstructHead extends React.Component {\n  /**\n   * Rendering the Reconstruct header.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item>\n        <Paper className='subHeadingPaper' style={{backgroundColor: '#DDDDDD'}}\n          square>\n          <Grid container direction='row' spacing={1} alignItems=\"center\"\n            wrap='nowrap'>\n            <Tooltip title=\"Reconstruct Target\" placement=\"top\">\n              <Grid item style={{width: this.props.sentenceParams.headWidth}}>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  T\n                </Typography>\n              </Grid>\n            </Tooltip>\n            <Grid item>\n              <ReconstructSentence\n                sentence={this.props.params.tokens}\n                target={this.props.sentenceParams.target}\n                original={this.props.params.tokens}\n                colors={this.props.sentenceParams.colors}/>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nReconstructHead.propTypes = {\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default ReconstructHead;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\nimport GlyphComponent from '../../glyph/GlyphComponent';\n\nimport * as glyphs from '../../../glyphs';\n\n/**\n * Provides a Body Component for the Reconstruct Card.\n */\nclass reconstructBody extends React.Component {\n  /**\n   * Renders the component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const iterations = this.props.results.iterations;\n    const glyphsParams = glyphs.iterationsToGlyphsParams(iterations);\n    return (\n      <Grid container direction='column' spacing={2} wrap='nowrap'>\n        {iterations.map((iteration, index) =>\n          <Grid item key={index}>\n            <Grid container direction='row' spacing={1}>\n              <Tooltip title=\"Iteration Number\" placement=\"top\">\n                <Grid item style={{width: this.props.sentenceParams.itWidth}}>\n                  <Typography variant=\"caption\" color=\"inherit\">\n                    {iteration.number}\n                  </Typography>\n                </Grid>\n              </Tooltip>\n              <Grid item>\n                <Grid container direction='row' spacing={0}>\n                  {Object.keys(glyphsParams).map((key, idx) =>\n                    <Tooltip\n                      title={key + ': ' +\n                          glyphsParams[key].iterations[\n                              index].toFixed(4)}\n                      placement=\"top\" key={idx}>\n                      <Grid item>\n                        <GlyphComponent\n                          value={glyphsParams[key].iterations[index]}\n                          extremes={glyphsParams[key].extremes}\n                          color={glyphsParams[key].color}/>\n                      </Grid>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item>\n                <ReconstructSentence sentence={iteration.tokens}\n                  target={this.props.sentenceParams.target}\n                  original={this.props.params.tokens}\n                  colors={this.props.sentenceParams.colors}/>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nreconstructBody.propTypes = {\n  results: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default reconstructBody;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport ReconstructHead from './heads/ReconstructHeadComponent';\nimport ReconstructBody from './bodies/ReconstructBodyComponent';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\n\nimport * as sentences from '../../sentences';\n\n/**\n * Provides a Card Component for reconstruct results.\n */\nclass Reconstruct extends React.PureComponent {\n  /**\n   * Render the component with the reuslts.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const sentenceParams = sentences.getReconstructSentenceParams(\n        this.props.results, this.props.params);\n    const headParams = {\n      'LayerID': this.props.params.layer_id,\n      'WordID': this.props.params.word_id,\n      'NeuronID': this.props.params.neuron_id,\n    };\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <ExplanationHead\n          topic=\"Reconstruct\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        <ReconstructHead\n          results={this.props.results}\n          params={this.props.params}\n          sentenceParams={sentenceParams}/>\n        <div className='overflow'>\n          <Paper className={'dreamPaper'}>\n            <ReconstructBody\n              results={this.props.results}\n              params={this.props.params}\n              sentenceParams={sentenceParams}/>\n          </Paper>\n        </div>\n      </Grid>\n    );\n  }\n}\n\nReconstruct.propTypes = {\n  results: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  colors: PropTypes.array.isRequired,\n};\n\nexport default Reconstruct;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip, Paper} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\n\n/**\n * Providing a header component for shifted Reconstruct results.\n */\nclass ShiftedReconstructHead extends React.Component {\n  /**\n   * Render the header component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item>\n        <Paper className='subHeadingPaper' style={{backgroundColor: '#DDDDDD'}}\n          square>\n          <Grid container direction='row' spacing={1} alignItems=\"center\">\n            <Tooltip title=\"Reconstruct Input\" placement=\"top\">\n              <Grid item style={{width: this.props.sentenceParams.headWidth}}>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  I\n                </Typography>\n              </Grid>\n            </Tooltip>\n            <Grid item>\n              <ReconstructSentence\n                sentence={this.props.params.tokens}\n                target={this.props.sentenceParams.target}\n                original={this.props.params.tokens}\n                colors={this.props.sentenceParams.colors}/>\n            </Grid>\n          </Grid>\n        </Paper>\n        <Paper className='subHeadingPaper' style={{backgroundColor: '#DDDDDD'}}\n          square>\n          <Grid container direction='row' spacing={1} alignItems=\"center\">\n            <Tooltip title=\"Reconstruct Target\" placement=\"top\">\n              <Grid item style={{width: this.props.sentenceParams.headWidth}}>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  T\n                </Typography>\n              </Grid>\n            </Tooltip>\n            <Grid item>\n              <ReconstructSentence\n                sentence={this.props.sentenceParams.changedSentence}\n                target={this.props.sentenceParams.target}\n                original={this.props.params.tokens}\n                colors={this.props.sentenceParams.colors}/>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nShiftedReconstructHead.propTypes = {\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default ShiftedReconstructHead;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\nimport GlyphComponent from '../../glyph/GlyphComponent';\n\nimport * as glyphs from '../../../glyphs';\n\n/**\n * Provides a Body Component for the Megnitudes Card.\n */\nclass MagnitudesBody extends React.Component {\n  /**\n   * Renders the component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const magnitudes = this.props.magnitudes;\n    magnitudes.sort(function(a, b) {\n      return a.params.shift_magnitude - b.params.shift_magnitude;\n    });\n    const glyphsParams = glyphs.magnitudesToGlyphsParams(magnitudes);\n    return (\n      <Grid container direction='column' spacing={2} wrap='nowrap'>\n        {magnitudes.map((magnitude, index) =>\n          <Grid item key={index}>\n            <Grid container direction='row' spacing={1}>\n              <Tooltip title=\"Shift Magnitude\" placement=\"top\">\n                <Grid item style={{width: this.props.sentenceParams.itWidth}}>\n                  <Typography variant=\"caption\" color=\"inherit\">\n                    {magnitude.params.shift_magnitude}\n                  </Typography>\n                </Grid>\n              </Tooltip>\n              <Grid item>\n                <Grid container direction='row' spacing={0}>\n                  {Object.keys(glyphsParams).map((key, idx) =>\n                    <Tooltip\n                      title={key + ': ' +\n                          glyphsParams[key].magnitudes[\n                              index].toFixed(4)}\n                      placement=\"top\" key={idx}>\n                      <Grid item>\n                        <GlyphComponent\n                          value={glyphsParams[key].magnitudes[index]}\n                          extremes={glyphsParams[key].extremes}\n                          color={glyphsParams[key].color}/>\n                      </Grid>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item>\n                <ReconstructSentence\n                  sentence={magnitude.results.iterations[\n                      magnitude.results.iterations.length - 1].tokens}\n                  target={this.props.sentenceParams.target}\n                  original={magnitude.params.tokens}\n                  colors={this.props.sentenceParams.colors}/>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nMagnitudesBody.propTypes = {\n  magnitudes: PropTypes.array.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default MagnitudesBody;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Tooltip} from '@material-ui/core';\n\nimport ReconstructSentence from '../../reconstruct/ReconstructSentence';\nimport GlyphComponent from '../../glyph/GlyphComponent';\n\nimport * as glyphs from '../../../glyphs';\n\n/**\n * Component that provides a body for the Shifted Reconstruct Card.\n */\nclass ShiftedReconstructBody extends React.Component {\n  /**\n   * Renders the body of this component with all its iterations.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const iterations = this.props.results.iterations;\n    const glyphsParams = glyphs.iterationsToGlyphsParams(iterations);\n    return (\n      <Grid container direction='column' spacing={2} wrap='nowrap'>\n        {iterations.map((iteration, index) =>\n          <Grid item key={index}>\n            <Grid container direction='row' spacing={1}>\n              <Tooltip title=\"Iteration Number\" placement=\"top\">\n                <Grid item style={{width: this.props.sentenceParams.itWidth}}>\n                  <Typography variant=\"caption\" color=\"inherit\">\n                    {iteration.number}\n                  </Typography>\n                </Grid>\n              </Tooltip>\n              <Grid item>\n                <Grid container direction='row' spacing={0}>\n                  {Object.keys(glyphsParams).map((key, idx) =>\n                    <Tooltip\n                      title={key + ': ' +\n                          glyphsParams[key].iterations[\n                              index].toFixed(4)}\n                      placement=\"top\" key={idx}>\n                      <Grid item>\n                        <GlyphComponent\n                          value={glyphsParams[key].iterations[index]}\n                          extremes={glyphsParams[key].extremes}\n                          color={glyphsParams[key].color}/>\n                      </Grid>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item>\n                <ReconstructSentence\n                  sentence={iteration.tokens}\n                  target={this.props.sentenceParams.target}\n                  original={this.props.params.tokens}\n                  colors={this.props.sentenceParams.colors}/>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n\nShiftedReconstructBody.propTypes = {\n  results: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  sentenceParams: PropTypes.object.isRequired,\n};\n\nexport default ShiftedReconstructBody;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails,\n  Typography} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport ReconstructSentence from '../reconstruct/ReconstructSentence';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport SelectionHead from './heads/SelectionHeadComponent';\n\nimport {getDreamProps, getReconstructProps,\n  getMagnitudesLayerProps} from '../../cardcontentprocessing';\nimport * as actions from '../../actions';\nimport * as constants from '../../data/Constants';\n\n/**\n * Provides a Card Component to render multiple Layers.\n */\nclass Layers extends React.PureComponent {\n  /**\n   * Renders all the layers of this Card.\n   *\n   * @return {jsx} the card with the layers to be rendered\n   */\n  render() {\n    let props;\n    switch (this.props.layers[0].type) {\n      case 'dream':\n        props = getDreamProps(this.props.layers);\n        break;\n      case 'reconstruct':\n        props = getReconstructProps(this.props.layers);\n        break;\n      case 'magnitudes':\n        props = getMagnitudesLayerProps(this.props.layers);\n        break;\n      default:\n        break;\n    }\n    props.sentenceParams.headWidth = props.sentenceParams.headWidth + 14;\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'\n        justify='center'>\n        <Grid item className='explanationItem'>\n          <p className='normalText'>\n            <b>Experiment {this.props.dreamID}: </b>{this.props.explanation}\n          </p>\n        </Grid>\n        <ExplanationHead\n          topic={props.topic}\n          params={props.headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        {props.head}\n        <div className='overflow bottomMargin'>\n          {props.bodies.map((body, index) =>\n            <ExpansionPanel key={index}>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Grid container direction='row' spacing={1} alignItems=\"center\"\n                  wrap='nowrap'>\n                  <Grid item style={{width: props.sentenceParams.headWidth}}>\n                    <Typography variant=\"body1\" color=\"inherit\">\n                      {props.layerIDs[index]}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <ReconstructSentence\n                      sentence={props.sentences[index]}\n                      target={props.sentenceParams.target}\n                      original={props.sentenceParams.original}\n                      colors={props.sentenceParams.colors}/>\n                  </Grid>\n                </Grid>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                {body}\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          )}\n        </div>\n        <SelectionHead\n          options={constants.numOptions}\n          clickHandler={this.handleClick.bind(this)}/>\n      </Grid>\n    );\n  }\n\n  /**\n   * Handles the selection of a different dreaming experiment.\n   *\n   * @param {number} index The index of the selected item.\n   */\n  handleClick(index) {\n    switch (this.props.layers[0].type) {\n      case 'dream':\n        this.props.actions.changeDream(index);\n        break;\n      case 'reconstruct':\n        this.props.actions.changeReconstruction(index);\n        break;\n      case 'magnitudes':\n        this.props.actions.changeShiftedReconstruction(index);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nLayers.propTypes = {\n  layers: PropTypes.array.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  explanation: PropTypes.string.isRequired,\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  colors: PropTypes.array.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layers);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\n\nimport DreamHead from '../components/cards/heads/DreamHeadComponent';\nimport DreamBody from '../components/cards/bodies/DreamBodyComponent';\nimport ReconstructHead from '../components/cards/heads/ReconstructHeadComponent';\nimport ReconstructBody from '../components/cards/bodies/ReconstructBodyComponent';\nimport ShiftedReconstructHead from\n  '../components/cards/heads/ShiftedReconstructHeadComponent';\nimport MagnitudesBody from '../components/cards/bodies/MagnitudesBodyComponent';\nimport ShiftedReconstructBody from\n  '../components/cards/bodies/ShiftedReconstructBodyComponent';\n\nimport {\n  getDreamSentenceParams,\n  getReconstructSentenceParams,\n  getShiftSentenceParams,\n  getClosestResult} from '../sentences';\n\n/**\n * Get the properties to be rendered for a dream layers card.\n *\n * @param {array} layers - the layers to be included in the card.\n * @return {object} the properties to be rendered for this card.\n */\nexport function getDreamProps(layers) {\n  layers.sort(function(a, b) {\n    return a.params.layer_id - b.params.layer_id;\n  });\n  const bodies = [];\n  const sentences = [];\n  const layerIDs = [];\n  const sentenceParams = getDreamSentenceParams(\n      layers[0].results, layers[0].params);\n  const head = <DreamHead\n    params={layers[0].params}\n    sentenceParams={sentenceParams}/>;\n  const topic = 'Dream';\n  const headParams = {\n    'WordID': layers[0].params.word_id,\n    'NeuronID': layers[0].params.neuron_id,\n  };\n  for (const layer of layers) {\n    layerIDs.push(layer.params.layer_id);\n    bodies.push(\n        <DreamBody\n          results={layer.results}\n          params={layer.params}\n          sentenceParams={sentenceParams}/>\n    );\n    sentences.push(layer.results.iterations[\n        layer.results.iterations.length - 1].tokens);\n  }\n  const props = {\n    'head': head,\n    'sentences': sentences,\n    'layerIDs': layerIDs,\n    'topic': topic,\n    'sentenceParams': sentenceParams,\n    'headParams': headParams,\n    'bodies': bodies,\n  };\n  return props;\n}\n\n/**\n * Get the properties to be rendered for a reconstruct layers card.\n *\n * @param {array} layers - the layers to be included in the card.\n * @return {object} the properties to be rendered for this card.\n */\nexport function getReconstructProps(layers) {\n  layers.sort(function(a, b) {\n    return a.params.layer_id - b.params.layer_id;\n  });\n  const bodies = [];\n  const sentences = [];\n  const layerIDs = [];\n  const sentenceParams = getReconstructSentenceParams(\n      layers[0].results, layers[0].params);\n  const head = <ReconstructHead\n    results={layers[0].results}\n    params={layers[0].params}\n    sentenceParams={sentenceParams}/>;\n  const topic = 'Reconstruct';\n  const headParams = {\n    'WordID': layers[0].params.word_id,\n    'NeuronID': layers[0].params.neuron_id,\n  };\n  for (const layer of layers) {\n    layerIDs.push(layer.params.layer_id);\n    bodies.push(\n        <ReconstructBody\n          results={layer.results}\n          params={layer.params}\n          sentenceParams={sentenceParams}/>\n    );\n    sentences.push(layer.results.iterations[\n        layer.results.iterations.length - 1].tokens);\n  }\n  const props = {\n    'head': head,\n    'sentences': sentences,\n    'layerIDs': layerIDs,\n    'topic': topic,\n    'sentenceParams': sentenceParams,\n    'headParams': headParams,\n    'bodies': bodies,\n  };\n  return props;\n}\n\n/**\n * Get the properties to be rendered for a magnitudes layers card.\n *\n * @param {array} layers - the layers to be included in the card.\n * @return {object} the properties to be rendered for this card.\n */\nexport function getMagnitudesLayerProps(layers) {\n  layers.sort(function(a, b) {\n    return a.magnitudes[0].params.layer_id - b.magnitudes[0].params.layer_id;\n  });\n  const bodies = [];\n  const sentences = [];\n  const layerIDs = [];\n  const sentenceParams = getShiftSentenceParams(\n      layers[0].magnitudes[0].results, layers[0].magnitudes[0].params);\n  sentenceParams.headWidth = sentenceParams.headWidth - 10;\n  const headParams = {\n    'WordID': layers[0].magnitudes[0].params.word_id,\n    'NeuronID': layers[0].magnitudes[0].params.neuron_id,\n  };\n  const topic = 'Shift';\n  const head = <ShiftedReconstructHead\n    params={layers[0].magnitudes[0].params}\n    sentenceParams={sentenceParams}/>;\n  for (const layer of layers) {\n    layerIDs.push(layer.magnitudes[0].params.layer_id);\n    bodies.push(\n        <MagnitudesBody\n          magnitudes={layer.magnitudes}\n          sentenceParams={sentenceParams}/>\n    );\n    sentences.push(getClosestResult(sentenceParams.changedSentence,\n        layer.magnitudes));\n  }\n  const props = {\n    'head': head,\n    'sentences': sentences,\n    'layerIDs': layerIDs,\n    'topic': topic,\n    'sentenceParams': sentenceParams,\n    'headParams': headParams,\n    'bodies': bodies,\n  };\n  return props;\n}\n\n/**\n * Get the properties to be rendered for a shifted Reconstruct magnitudes\n * card.\n *\n * @param {array} magnitudes - the magnitudes to be included in the card.\n * @return {object} the properties to be rendered for this card.\n */\nexport function getMagnitudesProps(magnitudes) {\n  magnitudes.sort(function(a, b) {\n    return a.params.shift_magnitude - b.params.shift_magnitude;\n  });\n  const bodies = [];\n  const sentences = [];\n  const magnitudeValues = [];\n  const sentenceParams = getShiftSentenceParams(\n      magnitudes[0].results, magnitudes[0].params);\n  const headParams = {\n    'LayerID': magnitudes[0].params.layer_id,\n    'WordID': magnitudes[0].params.word_id,\n    'NeuronID': magnitudes[0].params.neuron_id,\n  };\n  const topic = 'Shift';\n  const head = <ShiftedReconstructHead\n    params={magnitudes[0].params}\n    sentenceParams={sentenceParams}/>;\n  for (const magnitude of magnitudes) {\n    magnitudeValues.push(magnitude.params.shift_magnitude);\n    bodies.push(\n        <ShiftedReconstructBody\n          results={magnitude.results}\n          params={magnitude.params}\n          sentenceParams={sentenceParams}/>\n    );\n    sentences.push(magnitude.results.iterations[\n        magnitude.results.iterations.length - 1].tokens);\n  }\n  const props = {\n    'head': head,\n    'sentences': sentences,\n    'magnitudeValues': magnitudeValues,\n    'topic': topic,\n    'sentenceParams': sentenceParams,\n    'headParams': headParams,\n    'bodies': bodies,\n  };\n  return props;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails,\n  Typography} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport ReconstructSentence from '../reconstruct/ReconstructSentence';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport ShiftedReconstructHead from\n  './heads/ShiftedReconstructHeadComponent';\n\nimport * as sentences from '../../sentences';\nimport {getMagnitudesProps} from '../../cardcontentprocessing';\n\n/**\n * Provides a Card Component that Renders multiple Magnitues.\n */\nclass Magnitudes extends React.PureComponent {\n  /**\n   * Renders all the magnitudes for this card.\n   *\n   * @return {jsx} the card to be rendered, containing all the magnitudes\n   */\n  render() {\n    const headParams = {\n      'LayerID': this.props.magnitudes[0].params.layer_id,\n      'WordID': this.props.magnitudes[0].params.word_id,\n      'NeuronID': this.props.magnitudes[0].params.neuron_id,\n    };\n    const sentenceParams = sentences.getShiftSentenceParams(\n        this.props.magnitudes[0].results,\n        this.props.magnitudes[0].params);\n    const props = getMagnitudesProps(this.props.magnitudes);\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <ExplanationHead\n          topic=\"Shifted Reconstruct\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}/>\n        <ShiftedReconstructHead\n          params={this.props.magnitudes[0].params}\n          sentenceParams={sentenceParams}/>\n        <div className='overflow'>\n          {props.bodies.map((body, index) =>\n            <ExpansionPanel key={index}>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Grid container direction='row' spacing={1} alignItems=\"center\">\n                  <Grid item style={{width: props.sentenceParams.headWidth}}>\n                    <Typography variant=\"body1\" color=\"inherit\">\n                      {props.magnitudeValues[index]}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <ReconstructSentence\n                      sentence={props.sentences[index]}\n                      target={props.sentenceParams.target}\n                      original={props.sentenceParams.original}\n                      colors={props.sentenceParams.colors}/>\n                  </Grid>\n                </Grid>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                {body}\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          )}\n        </div>\n      </Grid>\n    );\n  }\n}\n\nMagnitudes.propTypes = {\n  magnitudes: PropTypes.array.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n};\n\nexport default Magnitudes;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport ShiftedReconstructHead from './heads/ShiftedReconstructHeadComponent';\nimport ShiftedReconstructBody from\n  './bodies/ShiftedReconstructBodyComponent';\n\nimport * as sentences from '../../sentences';\n\n/**\n * Provides a Card Component to display shifted Reconstruct results.\n */\nclass ShiftedReconstruct extends React.PureComponent {\n  /**\n   * Render the results of the shifted Reconstruct run.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const sentenceParams = sentences.getShiftSentenceParams(this.props.results,\n        this.props.params);\n    const headParams = {\n      'LayerID': this.props.params.layer_id,\n      'WordID': this.props.params.word_id,\n      'NeuronID': this.props.params.neuron_id,\n      'Magnitude': this.props.params.shift_magnitude,\n    };\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <ExplanationHead\n          topic=\"Shifted Reconstruct\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}/>\n        <ShiftedReconstructHead\n          params={this.props.params}\n          sentenceParams={sentenceParams}/>\n        <div className='overflow'>\n          <Paper className={'dreamPaper'}>\n            <ShiftedReconstructBody\n              params={this.props.params}\n              results={this.props.results}\n              sentenceParams={sentenceParams}/>\n          </Paper>\n        </div>\n      </Grid>\n    );\n  }\n}\n\nShiftedReconstruct.propTypes = {\n  results: PropTypes.object.isRequired,\n  params: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n};\n\nexport default ShiftedReconstruct;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Typography, Tooltip, Paper, Slider} from '@material-ui/core';\n\nimport Input from '@material-ui/core/Input';\n\nimport * as actions from '../../../actions';\n\n/**\n * Providing a header for TopWords experiments.\n */\nclass TopWordsHead extends React.Component {\n  /**\n   * Handles changes of the iteration slider.\n   *\n   * @param {object} event - the event that triggers this call.\n   * @param {number} newValue - the changed slider value.\n   */\n  handleSliderChange = (event, newValue) => {\n    this.props.actions.changeTopWordsIteration(newValue);\n  };\n\n  /**\n   * Handles changes of the value in the input box for the iterations.\n   *\n   * @param {object} event - the event that triggers this call.\n   */\n  handleInputChange = (event) => {\n    const newValue =\n      event.target.value === '' ? '' : Number(event.target.value);\n    this.props.actions.changeTopWordsIteration(newValue);\n  };\n\n  /**\n   * Renders the head component for top words with controls for iterations.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    // Check if the current iteration value is valid\n    const iteration = this.props.iteration;\n    return (\n      <Grid item>\n        <Paper className='subHeadingPaper'\n          style={{backgroundColor: '#DDDDDD'}} square>\n          <Grid container direction='row' spacing={1} alignItems=\"center\">\n            <Tooltip title=\"Input Sentence\" placement=\"top\">\n              <Grid item style={{paddingRight: 10}}>\n                <Typography variant=\"body1\" color=\"inherit\">\n                  Iteration:\n                </Typography>\n              </Grid>\n            </Tooltip>\n            <Grid item xs>\n              <Slider\n                value={iteration}\n                onChange={this.handleSliderChange}\n                max={this.props.maxIterations}\n                aria-labelledby=\"input-slider\"\n              />\n            </Grid>\n            <Grid item style={{paddingLeft: 10}}>\n              <Input\n                value={iteration}\n                margin=\"dense\"\n                onChange={this.handleInputChange}\n                inputProps={{\n                  'step': 1,\n                  'min': 0,\n                  'max': this.props.maxIterations,\n                  'type': 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n                className='inputElement'\n              />\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    );\n  }\n}\n\nTopWordsHead.propTypes = {\n  maxIterations: PropTypes.number.isRequired,\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired,\n  iteration: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(TopWordsHead);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\nimport {getColor} from '../../../colors';\n\nconst margin = {top: 50, right: 40, bottom: 60, left: 100};\n\n/**\n * Component that provides a body for the TopWords Card.\n */\nclass TopWordsBody extends React.Component {\n  /**\n   * When the component first mounts, draw the initial chart.\n   */\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  /**\n   * Whenever the props of the component update, also update the chart.\n   *\n   * @param {object} prevProps - props before the change.\n   */\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(this.props.cardDimensions) !==\n      JSON.stringify(prevProps.cardDimensions)) {\n      this.drawGraph();\n    } else {\n      this.updateGraph();\n    }\n  }\n\n  /**\n   * Setup all the params that are needed for drawing the graph.\n   *\n   * @return {object} parameters that are needed to draw or update the graph.\n   */\n  setupGraphParams() {\n    // Calculate the dimensions of the chart\n    const sideSubstitute = 20 + margin.right + margin.left;\n    const vertSubstitute = 170 + margin.top + margin.bottom;\n    const width = this.props.cardDimensions.width > sideSubstitute ?\n      this.props.cardDimensions.width - sideSubstitute : 20;\n    const height = this.props.cardDimensions.height > vertSubstitute ?\n      this.props.cardDimensions.height - vertSubstitute : 20;\n    // Check if the current iteration value is valid\n    const iteration = this.props.iteration;\n    // Get the current selected iteration results\n    const currentResults = this.props.dreamingElement.iterations[iteration];\n    // Set up the scales and axes\n    const xScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n    const yScale = d3.scaleBand()\n        .range([0, height])\n        .padding(0.1)\n        .domain(currentResults.tokens.map(function(d) {\n          return d;\n        }));\n    const yAxis = d3.axisLeft(yScale);\n    const svg = d3.select('.topWordsComponent' + this.props.elementIndex);\n    return {xScale, yScale, yAxis, svg, currentResults};\n  }\n\n  /**\n   * Draw the initial version of the chart at iteration 0.\n   */\n  drawGraph() {\n    const graphParams = this.setupGraphParams();\n    // Remove any old chart\n    graphParams.svg.select('g').remove();\n    const xAxis = d3.axisTop(graphParams.xScale);\n    // The group where the chart content lives in\n    const mainGroup = graphParams.svg.append('g').attr(\n        'transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    // Add the bars to the chart\n    mainGroup.selectAll('bar')\n        .data(graphParams.currentResults.scores)\n        .enter()\n        .append('rect')\n        .style('fill', getColor('distribution'))\n        .attr('x', 0)\n        .attr(\n            'width',\n            function(d) {\n              return graphParams.xScale(d);\n            })\n        .attr(\n            'y',\n            function(_, i) {\n              return graphParams.yScale(graphParams.currentResults.tokens[i]);\n            })\n        .attr('height', graphParams.yScale.bandwidth());\n    // Top axis of the bar chart\n    mainGroup.append('g')\n        .attr('class', 'xAxis')\n        .call(xAxis)\n        .selectAll('text')\n        .style('font', '0.875rem roboto');\n    // Left axis of the bar chart\n    mainGroup.append('g')\n        .attr('class', 'yAxis')\n        .call(graphParams.yAxis)\n        .selectAll('text')\n        .style('font', '0.875rem roboto');\n  }\n\n  /**\n   * Method for updating the graph after the props have changed.\n   */\n  updateGraph() {\n    const graphParams = this.setupGraphParams();\n    const mainGroup = graphParams.svg.select('g');\n    // select all bars on the graph, take them out, and exit the\n    // previous data set. then you can add/enter the new data set\n    const bars = mainGroup.selectAll('.bar').remove().exit().data(\n        graphParams.currentResults.scores);\n    // now actually give each rectangle the corresponding data\n    bars.enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .style('fill', getColor('softmax'))\n        .attr('x', 0)\n        .attr(\n            'width',\n            function(d) {\n              return graphParams.xScale(d);\n            })\n        .attr(\n            'y',\n            function(_, i) {\n              return graphParams.yScale(graphParams.currentResults.tokens[i]);\n            })\n        .attr('height', graphParams.yScale.bandwidth());\n\n    mainGroup.select('.yAxis')\n        .call(graphParams.yAxis)\n        .selectAll('text')\n        .style('font', '0.875rem roboto');\n  }\n\n  /**\n   * Render the component by adding the chart.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        className={'topWordsComponent' + this.props.elementIndex}/>\n    );\n  }\n}\n\nTopWordsBody.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  cardDimensions: PropTypes.object.isRequired,\n  iteration: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    cardDimensions: state.cardDimensions,\n  };\n}\n\nexport default connect(mapStateToProps)(TopWordsBody);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport DreamHead from './heads/DreamHeadComponent';\nimport TopWordsHead from './heads/TopWordsHeadComponent';\nimport TopWordsBody from './bodies/TopWordsBodyComponent';\nimport SelectionHead from './heads/SelectionHeadComponent';\n\nimport * as actions from '../../actions';\nimport * as constants from '../../data/Constants';\n\n/**\n * Providing a Card Component for the TopWords chart in different experiments.\n */\nclass TopWords extends React.PureComponent {\n  /**\n   * Rendering the chart card.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    let iteration = this.props.topWordsIteration;\n    iteration = iteration < this.props.dreamingElement.iterations.length ?\n        iteration : this.props.dreamingElement.iterations.length - 1;\n    const headParams = {\n      'LayerID': this.props.dreamingElement.params.layer_id,\n      'WordID': this.props.dreamingElement.params.word_id,\n      'NeuronID': this.props.dreamingElement.params.neuron_id,\n      'Activation': this.props.dreamingElement.iterations[\n          iteration].activation.toFixed(4),\n    };\n    const target = [...this.props.dreamingElement.params.tokens];\n    for (const tokenID in this.props.dreamingElement.params.tokens) {\n      if (this.props.dreamingElement.word_id !== parseInt(tokenID)) {\n        target[tokenID] = '';\n      }\n    }\n    const sentenceParams = {\n      headWidth: 30,\n      colors: ['blue', 'black', 'black'],\n      target: target,\n    };\n    const params = {\n      tokens: this.props.dreamingElement.params.tokens,\n    };\n    const maxIterations = this.props.dreamingElement.iterations[\n        this.props.dreamingElement.iterations.length -1].number;\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <Grid item className='explanationItem'>\n          <p className='normalText'>\n            <b>Experiment {this.props.dreamID}: </b>{this.props.explanation}\n          </p>\n        </Grid>\n        <ExplanationHead\n          topic=\"Top Words\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        <DreamHead\n          params={params}\n          sentenceParams={sentenceParams}/>\n        <TopWordsHead\n          maxIterations={maxIterations}\n          dreamingElement={this.props.dreamingElement}\n          elementIndex={this.props.elementIndex}\n          iteration={iteration}/>\n        <Grid item xs>\n          <Paper id='topWordsPaper' className={'dreamPaper fullHeight'}>\n            <TopWordsBody\n              dreamingElement={this.props.dreamingElement}\n              elementIndex={this.props.elementIndex}\n              iteration={iteration}/>\n          </Paper>\n        </Grid>\n        <SelectionHead\n          options={constants.numOptions}\n          clickHandler={this.handleClick.bind(this)}/>\n      </Grid>\n    );\n  }\n\n  /**\n   * Handles clicks on the run selection items.\n   *\n   * @param {number} index the index of the item that was clicked.\n   */\n  handleClick(index) {\n    this.props.actions.changeAnnealing(index);\n  }\n}\n\nTopWords.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  topWordsIteration: PropTypes.number.isRequired,\n  explanation: PropTypes.string.isRequired,\n  colors: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    topWordsIteration: state.topWordsIteration,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopWords);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\nimport {getColor} from '../../../colors';\n\nconst margin = {top: 20, right: 20, bottom: 60, left: 100};\n\n/**\n * Provides a Body Component for the Similar Embeddings Card.\n */\nclass SimilarEmbeddingsBodyComponent extends React.Component {\n  /**\n   * Draws the chart once the component has mounted.\n   */\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  /**\n   * When this component updates, probably the dimensions have changed,\n   * therefore, redraw the chart.\n   */\n  componentDidUpdate() {\n    this.drawGraph();\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        className={'similarEmbeddingsComponent' + this.props.elementIndex}/>\n    );\n  }\n\n  /**\n   * Draw the chart into the svg.\n   */\n  drawGraph() {\n    // Calculate the dimensions of the chart\n    const sideSubstitute = 20 + margin.right + margin.left;\n    const vertSubstitute = 120 + margin.top + margin.bottom;\n    const width = this.props.cardDimensions.width > sideSubstitute ?\n      this.props.cardDimensions.width - sideSubstitute : 20;\n    const height = this.props.cardDimensions.height > vertSubstitute ?\n      this.props.cardDimensions.height - vertSubstitute : 20;\n    const svg = d3.select('.similarEmbeddingsComponent' +\n        this.props.elementIndex);\n    // Remove any old chart\n    svg.select('g').remove();\n    // Set up the scales and axes for the chart\n    let tops = this.props.dreamingElement.tops;\n    if (tops.length > 20) {\n      tops = tops.splice(0, 20);\n    }\n    const maxActivation = tops[0].activation;\n    let minActivation = 0;\n    for (const top of tops) {\n      minActivation = top.activation < minActivation ? top.activation :\n          minActivation;\n    }\n    const xScaleActivation = d3.scaleLinear().domain([minActivation,\n      maxActivation]).range([0, width]);\n    const xScaleDistance = d3.scaleLinear().domain([0,\n      this.props.dreamingElement.furthest]).range([\n      0, width]);\n    const yScale = d3.scaleBand()\n        .range([0, height])\n        .padding(0.1)\n        .domain(tops.map(function(d) {\n          return d.token;\n        }));\n    const yAxis = d3.axisLeft(yScale);\n    // The group where the chart content lives in\n    const mainGroup = svg.append('g').attr(\n        'transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    // Add the activation bars to the chart\n    mainGroup.selectAll('bar')\n        .data(tops)\n        .enter()\n        .append('rect')\n        .style('fill', getColor('activation'))\n        .attr('x', 0)\n        .attr(\n            'width',\n            function(d) {\n              return xScaleActivation(d.activation);\n            })\n        .attr(\n            'y',\n            function(d) {\n              return yScale(d.token);\n            })\n        .attr('height', yScale.bandwidth()/2.0);\n    // Add a label to each of the distance bars\n    mainGroup.selectAll('txt')\n        .data(tops)\n        .enter()\n        .append('text')\n        .style('font-size', '10px')\n        .attr('y', function(d) {\n          return yScale(d.token) + yScale.bandwidth() / 2 - 2;\n        })\n        .attr('x', function(d) {\n          return 3;\n        })\n        .text(function(d) {\n          return d.activation.toFixed(4);\n        });\n\n    // Add the distance bars to the chart\n    mainGroup.selectAll('bar')\n        .data(tops)\n        .enter()\n        .append('rect')\n        .style('fill', getColor('distance'))\n        .attr('x', 0)\n        .attr(\n            'width',\n            function(d) {\n              return xScaleDistance(d.distance);\n            })\n        .attr(\n            'y',\n            function(d) {\n              return yScale(d.token) + yScale.bandwidth()/2.0;\n            })\n        .attr('height', yScale.bandwidth()/2.0);\n    // Add a label to each of the distance bars\n    mainGroup.selectAll('txt')\n        .data(tops)\n        .enter()\n        .append('text')\n        .style('font-size', '10px')\n        .attr('y', function(d) {\n          return yScale(d.token) + yScale.bandwidth() - 2;\n        })\n        .attr('x', function(d) {\n          return 3;\n        })\n        .text(function(d) {\n          return d.distance.toFixed(2);\n        });\n    // Left axis of the bar chart\n    mainGroup.append('g')\n        .attr('class', 'yAxis')\n        .call(yAxis)\n        .selectAll('text')\n        .style('font', '0.875rem roboto');\n  }\n}\n\nSimilarEmbeddingsBodyComponent.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  cardDimensions: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    cardDimensions: state.cardDimensions,\n  };\n}\n\nexport default connect(mapStateToProps)(SimilarEmbeddingsBodyComponent);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport DreamHead from './heads/DreamHeadComponent';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport SimilarEmbeddingsBody from './bodies/SimilarEmbeddingsBodyComponent';\nimport SelectionHead from './heads/SelectionHeadComponent';\n\nimport * as actions from '../../actions';\nimport * as constants from '../../data/Constants';\n\n/**\n * Provides a Card Component for rendering a chart with similar embedding\n * activations.\n */\nclass SimilarEmbeddings extends React.PureComponent {\n  /**\n   * Render the chart with similar embedding activations.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const headParams = {\n      'LayerID': this.props.dreamingElement.layer_id,\n      'WordID': this.props.dreamingElement.word_id,\n      'NeuronID': this.props.dreamingElement.neuron_id,\n    };\n    const target = [...this.props.dreamingElement.tokens];\n    for (const tokenID in this.props.dreamingElement.tokens) {\n      if (this.props.dreamingElement.change_word !== parseInt(tokenID)) {\n        target[tokenID] = '';\n      }\n    }\n    const sentenceParams = {\n      headWidth: 30,\n      colors: ['blue', 'black', 'black'],\n      target: target,\n    };\n    const params = {\n      tokens: this.props.dreamingElement.tokens,\n    };\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <Grid item className='explanationItem'>\n          <p className='normalText'>\n            <b>Experiment {this.props.dreamID}: </b>{this.props.explanation}\n          </p>\n        </Grid>\n        <ExplanationHead\n          topic=\"Similar Embeddings\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        <DreamHead\n          params={params}\n          sentenceParams={sentenceParams}/>\n        <Grid item xs>\n          <Paper id='topWordsPaper' className={'dreamPaper fullHeight'}>\n            <SimilarEmbeddingsBody\n              dreamingElement={this.props.dreamingElement}\n              elementIndex={this.props.elementIndex}/>\n          </Paper>\n        </Grid>\n        <SelectionHead\n          options={constants.numOptions}\n          clickHandler={this.handleClick.bind(this)}/>\n      </Grid>\n    );\n  }\n\n  /**\n   * Handles the selection of a different experiment.\n   *\n   * @param {number} index The index of the selected item.\n   */\n  handleClick(index) {\n    this.props.actions.changeSimilarWords(index);\n  }\n}\n\nSimilarEmbeddings.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  explanation: PropTypes.string.isRequired,\n  colors: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimilarEmbeddings);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux'; import PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\nimport {getColor} from '../../../colors';\n\nconst margin = {top: 20, right: 20, bottom: 60, left: 100};\n\n/**\n * Provides a Body Component for the Similar Embeddings Card.\n */\nclass TokenSearchBodyComponent extends React.Component {\n  /**\n   * Draws the chart once the component has mounted.\n   */\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  /**\n   * When this component updates, probably the dimensions have changed,\n   * therefore, redraw the chart.\n   */\n  componentDidUpdate() {\n    this.drawGraph();\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        className={'tokenSearchComponent' + this.props.elementIndex}/>\n    );\n  }\n\n  /**\n   * Draw the chart into the svg.\n   */\n  drawGraph() {\n    // Calculate the dimensions of the chart\n    const sideSubstitute = 20 + margin.right + margin.left;\n    const vertSubstitute = 120 + margin.top + margin.bottom;\n    const width = this.props.cardDimensions.width > sideSubstitute ?\n      this.props.cardDimensions.width - sideSubstitute : 20;\n    const height = this.props.cardDimensions.height > vertSubstitute ?\n      this.props.cardDimensions.height - vertSubstitute : 20;\n    const svg = d3.select('.tokenSearchComponent' + this.props.elementIndex);\n    // Remove any old chart\n    svg.select('g').remove();\n    // Set up the scales and axes for the chart\n    let tops = this.props.dreamingElement.tops;\n    if (tops.length > 30) {\n      tops = tops.slice(0, 30);\n    }\n    const maxActivation = tops[0].activation;\n    let minActivation = 0;\n    for (const top of tops) {\n      minActivation = top.activation < minActivation ? top.activation :\n          minActivation;\n    }\n    const xScaleActivation = d3.scaleLinear().domain([minActivation,\n      maxActivation]).range([0, width]);\n    const yScale = d3.scaleBand()\n        .range([0, height])\n        .padding(0.1)\n        .domain(tops.map(function(d) {\n          return d.token;\n        }));\n    const yAxis = d3.axisLeft(yScale);\n    // The group where the chart content lives in\n    const mainGroup = svg.append('g').attr(\n        'transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    // Add the activation bars to the chart\n    mainGroup.selectAll('bar')\n        .data(tops)\n        .enter()\n        .append('rect')\n        .style('fill', getColor('activation'))\n        .attr('x', 0)\n        .attr(\n            'width',\n            function(d) {\n              return xScaleActivation(d.activation);\n            })\n        .attr(\n            'y',\n            function(d) {\n              return yScale(d.token);\n            })\n        .attr('height', yScale.bandwidth());\n    // Add a label to each of the bars\n    mainGroup.selectAll('text')\n        .data(tops)\n        .enter()\n        .append('text')\n        .style('font', '10px roboto')\n        .attr('y', function(d) {\n          return yScale(d.token) + yScale.bandwidth() / 2 + 5;\n        })\n        .attr('x', function(d) {\n          return 3;\n        })\n        .text(function(d) {\n          return d.activation.toFixed(4);\n        });\n    // Left axis of the bar chart\n    mainGroup.append('g')\n        .attr('class', 'yAxis')\n        .style('font', '10px roboto')\n        .call(yAxis)\n        .selectAll('text');\n  }\n}\n\nTokenSearchBodyComponent.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  cardDimensions: PropTypes.object.isRequired,\n  colors: PropTypes.array.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    cardDimensions: state.cardDimensions,\n  };\n}\n\nexport default connect(mapStateToProps)(TokenSearchBodyComponent);\n\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, Paper} from '@material-ui/core';\n\nimport DreamHead from './heads/DreamHeadComponent';\nimport ExplanationHead from './heads/ExplanationHeadComponent';\nimport TokenSearchBody from './bodies/TokenSearchBodyComponent';\nimport SelectionHead from './heads/SelectionHeadComponent';\n\nimport * as actions from '../../actions';\nimport * as constants from '../../data/Constants';\n\n/**\n * Provides a Card Component for rendering a chart with similar embedding\n * activations.\n */\nclass TokenSearch extends React.PureComponent {\n  /**\n   * Render the chart with similar embedding activations.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const headParams = {\n      'LayerID': this.props.dreamingElement.layer_id,\n      'WordID': this.props.dreamingElement.word_id,\n      'NeuronID': this.props.dreamingElement.neuron_id,\n    };\n    const target = [...this.props.dreamingElement.tokens];\n    for (const tokenID in this.props.dreamingElement.tokens) {\n      if (this.props.dreamingElement.change_word !== parseInt(tokenID)) {\n        target[tokenID] = '';\n      }\n    }\n    const sentenceParams = {\n      headWidth: 30,\n      colors: ['blue', 'black', 'black'],\n      target: target,\n    };\n    const params = {\n      tokens: this.props.dreamingElement.tokens,\n    };\n    return (\n      <Grid container direction='column' className='fullHeight' wrap='nowrap'>\n        <Grid item className='explanationItem'>\n          <p className='normalText'>\n            <b>Experiment {this.props.dreamID}: </b>{this.props.explanation}\n          </p>\n        </Grid>\n        <ExplanationHead\n          topic=\"Token Search\"\n          params={headParams}\n          elementIndex={this.props.elementIndex}\n          colors={this.props.colors}/>\n        <DreamHead\n          params={params}\n          sentenceParams={sentenceParams}/>\n        <Grid item xs>\n          <Paper id='topWordsPaper' className={'dreamPaper fullHeight'}>\n            <TokenSearchBody\n              dreamingElement={this.props.dreamingElement}\n              elementIndex={this.props.elementIndex}/>\n          </Paper>\n        </Grid>\n        <SelectionHead\n          options={constants.numOptions}\n          clickHandler={this.handleClick.bind(this)}/>\n      </Grid>\n    );\n  }\n\n  /**\n   * Handles the selection of a different experiment.\n   *\n   * @param {number} index The index of the selected experiment.\n   */\n  handleClick(index) {\n    this.props.actions.changeTopWords(index);\n  }\n}\n\nTokenSearch.propTypes = {\n  dreamingElement: PropTypes.object.isRequired,\n  elementIndex: PropTypes.number.isRequired,\n  explanation: PropTypes.string.isRequired,\n  colors: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenSearch);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\n\nimport Dream from '../components/cards/DreamComponent';\nimport Reconstruct from '../components/cards/ReconstructComponent';\nimport Layers from '../components/cards/LayersComponent';\nimport Magnitudes from '../components/cards/MagnitudesComponent';\nimport ShiftedReconstruct from\n  '../components/cards/ShiftedReconstructComponent';\nimport TopWordsComponent from '../components/cards/TopWordsComponent';\nimport SimilarEmbeddings from\n  '../components/cards/SimilarEmbeddingsComponent';\nimport TokenSearch from '../components/cards/TokenSearchComponent';\n\nexport const elementTypes = {\n  dream: 'dream',\n  reconstruct: 'reconstruct',\n  reconstruct_shifted: 'reconstruct_shifted',\n  top_words: 'top_words',\n  similar_embeddings: 'similar_embeddings',\n  token_search: 'token_search',\n  magnitudes: 'magnitudes',\n  layer_magnitudes: 'layer_magnitudes',\n  layers: 'layers',\n};\n\n/**\n * Function to get the correct card Component for a dreamingElement.\n *\n * @param {object} dreamingElement - the element that should be rendered as a\n * card.\n * @param {number} elementIndex - the index of the current element.\n * @param {string} explanation - the explanation for this card.\n * @param {array} colors - the colors for the legend of this card.\n * @return {object} the card to be rendered.\n */\nexport function getCard(dreamingElement, elementIndex, explanation, colors) {\n  let dreamingCard;\n  switch (dreamingElement.type) {\n    case elementTypes.dream:\n      dreamingCard = <Dream\n        results={dreamingElement.results}\n        params={dreamingElement.params}\n        elementIndex={elementIndex}\n        explanation={explanation}\n        colors={colors}/>;\n      break;\n    case elementTypes.reconstruct:\n      dreamingCard = <Reconstruct\n        results={dreamingElement.results}\n        params={dreamingElement.params}\n        elementIndex={elementIndex}\n        colors={colors}/>;\n      break;\n    case elementTypes.reconstruct_shifted:\n      dreamingCard = <ShiftedReconstruct\n        results={dreamingElement.results}\n        params={dreamingElement.params}\n        elementIndex={elementIndex}/>;\n      break;\n    case elementTypes.top_words:\n      dreamingCard = <TopWordsComponent\n        dreamingElement={dreamingElement}\n        elementIndex={elementIndex}\n        explanation={explanation}\n        colors={colors}/>;\n      break;\n    case elementTypes.similar_embeddings:\n      dreamingCard = <SimilarEmbeddings\n        dreamingElement={dreamingElement}\n        elementIndex={elementIndex}\n        explanation={explanation}\n        colors={colors}/>;\n      break;\n    case elementTypes.token_search:\n      dreamingCard = <TokenSearch\n        dreamingElement={dreamingElement}\n        elementIndex={elementIndex}\n        explanation={explanation}\n        colors={colors}/>;\n      break;\n    case elementTypes.magnitudes:\n      dreamingCard = <Magnitudes\n        magnitudes={dreamingElement.magnitudes}\n        elementIndex={elementIndex}/>;\n      break;\n    case elementTypes.layers:\n      dreamingCard = <Layers\n        layers={dreamingElement.layers}\n        elementIndex={elementIndex}\n        explanation={explanation}\n        colors={colors}/>;\n      break;\n    default:\n      dreamingCard = <div></div>;\n  }\n  return dreamingCard;\n}\n","class DreamApi {\n  static getDreamJSON(id) {\n    const identifier = id + '_dream.json';\n    return this.fetchData(identifier);\n  }\n\n  static getAnnealingJSON(id) {\n    const identifier = id + '_annealing.json';\n    return this.fetchData(identifier);\n  }\n\n  static getTopWordsJSON(id) {\n    const identifier = id + '_top_words.json';\n    return this.fetchData(identifier);\n  }\n\n  static getSimilarWordsJSON(id) {\n    const identifier = id + '_similar_words.json';\n    return this.fetchData(identifier);\n  }\n\n  static getReconstructionJSON(id) {\n    const identifier = id + '_reconstruction.json';\n    return this.fetchData(identifier);\n  }\n\n  static getShiftedReconstructionJSON(id) {\n    const identifier = id + '_shifted_reconstruction.json';\n    return this.fetchData(identifier);\n  }\n\n  static fetchData(identifier) {\n    const request = new Request(`${process.env.PUBLIC_URL}/data/${identifier}`, { // Prepare the Request\n      method: 'GET'\n    });\n\n    return fetch(request).then(response => { // Return the result of the Request\n      return response.json();\n    }).catch(error => {\n      return error;\n    });\n  }\n}\n\nexport default DreamApi;","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport * as types from './types';\nimport {elementTypes} from '../cardprocessing';\nimport DreamApi from '../api/DreamApi';\n\n/**\n * Triggers the addition of a new dreaming element.\n *\n * @param {object} element - the element to be added to the visualization.\n * @return {object} the action to be dispatched for this change.\n */\nexport function addDreamingElement(element) {\n  if (element.type === elementTypes.top_words) {\n    element['iteration'] = 0;\n  }\n  return {type: types.ADD_DREAMING_ELEMENT, element};\n}\n\n/**\n * Triggers the update of the existing dreaming elements.\n *\n * @param {array} elements - the elements to be saved to the state.\n * @return {object} the action to be dispatched for this change.\n */\nexport function updateDreamingElements(elements) {\n  return {type: types.UPDATE_DREAMING_ELEMENTS, elements};\n}\n\n/**\n * Triggers the removal of an existing dreaming element from the visualization.\n *\n * @param {number} index - the index of the element to be removed.\n * @return {object} the action to be dispatched for this change.\n */\nexport function removeDreamingElement(index) {\n  return {type: types.REMOVE_DREAMING_ELEMENT, index};\n}\n\n/**\n * Triggers the change of the iteration parameter for an existing dreaming\n * element.\n *\n * @param {number} iteration - the new iteration number for the element.\n * @param {number} index - the index of the element to be changed.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeDreamingElementIteration(iteration, index) {\n  return {type: types.CHANGE_DREAMING_ELEMENT_ITERATION, iteration, index};\n}\n\n/**\n * Triggers the change of the dimension property for cards displayed.\n *\n * @param {object} dimensions - the new card dimensions to write to the state.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeCardDimensions(dimensions) {\n  return {type: types.CHANGE_CARD_DIMENSIONS, dimensions};\n}\n\n/**\n * Triggers the change of the softmax status.\n *\n * @param {array} status - the new status for the softmax trick vis.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeSoftmaxStatus(status) {\n  return {type: types.CHANGE_SOFTMAX_STATUS, status};\n}\n\n/**\n * Triggers the change of the progress bar.\n *\n * @param {number} page - the new status for the progress bar.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeProgressPage(page) {\n  return {type: types.CHANGE_PROGRESS_PAGE, page};\n}\n\n/**\n * Triggers the change of the progress bar.\n *\n * @param {number} iteration - the new iteration in the top words component.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeTopWordsIteration(iteration) {\n  return {type: types.CHANGE_TOP_WORDS_ITERATION, iteration};\n}\n\n/**\n * Changes the id of the currently selected experiment.\n *\n * @param {number} id the id for the experiment to be selected.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeDreamID(id) {\n  return {type: types.CHANGE_DREAM_ID, id};\n}\n\n/**\n * Signals that changing the dream experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeDreamSuccess(results) {\n  return {type: types.LOAD_DREAM_SUCCESS, results};\n}\n\n/**\n * Loads a dream experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadDream(id) {\n  return function(dispatch) {\n    return DreamApi.getDreamJSON(id).then((results) => {\n      dispatch(changeDreamSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the dream experiment by changing the id & loading the new experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeDream(id) {\n  return function(dispatch) {\n    return DreamApi.getDreamJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeDreamSuccess(results));\n    });\n  };\n}\n\n/**\n * Signals that changing the anneal experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeAnnealingSuccess(results) {\n  return {type: types.LOAD_ANNEALING_SUCCESS, results};\n}\n\n/**\n * Loads an anneal experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadAnnealing(id) {\n  return function(dispatch) {\n    return DreamApi.getAnnealingJSON(id).then((results) => {\n      dispatch(changeAnnealingSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the anneal exp. by changing the id & loading the new exp.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeAnnealing(id) {\n  return function(dispatch) {\n    return DreamApi.getAnnealingJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeAnnealingSuccess(results));\n    });\n  };\n}\n\n/**\n * Signals that changing the top words experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeTopWordsSuccess(results) {\n  return {type: types.LOAD_TOP_WORDS_SUCCESS, results};\n}\n\n/**\n * Loads a top words experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadTopWords(id) {\n  return function(dispatch) {\n    return DreamApi.getTopWordsJSON(id).then((results) => {\n      dispatch(changeTopWordsSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the top words exp. by changing the id & loading the new exp.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeTopWords(id) {\n  return function(dispatch) {\n    return DreamApi.getTopWordsJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeTopWordsSuccess(results));\n    });\n  };\n}\n\n/**\n * Signals that changing the sim. words experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeSimilarWordsSuccess(results) {\n  return {type: types.LOAD_SIMILAR_WORDS_SUCCESS, results};\n}\n\n/**\n * Loads a sim words experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadSimilarWords(id) {\n  return function(dispatch) {\n    return DreamApi.getSimilarWordsJSON(id).then((results) => {\n      dispatch(changeSimilarWordsSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the sim words exp. by changing the id & loading the new exp.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeSimilarWords(id) {\n  return function(dispatch) {\n    return DreamApi.getSimilarWordsJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeSimilarWordsSuccess(results));\n    });\n  };\n}\n\n/**\n * Signals that changing the reconstruction experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeReconstructionSuccess(results) {\n  return {type: types.LOAD_RECONSTRUCTION_SUCCESS, results};\n}\n\n/**\n * Loads a reconstruction experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadReconstruction(id) {\n  return function(dispatch) {\n    return DreamApi.getReconstructionJSON(id).then((results) => {\n      dispatch(changeReconstructionSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the reconstruction exp. by changing the id & loading the new exp.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeReconstruction(id) {\n  return function(dispatch) {\n    return DreamApi.getReconstructionJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeReconstructionSuccess(results));\n    });\n  };\n}\n\n/**\n * Signals that changing the shift reconstruction experiment was successful.\n *\n * @param {object} results the new experiment details.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeShiftedReconstructionSuccess(results) {\n  return {type: types.LOAD_SHIFTED_RECONSTRUCTION_SUCCESS, results};\n}\n\n/**\n * Loads a shift reconstruction experiment.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function loadShiftedReconstruction(id) {\n  return function(dispatch) {\n    return DreamApi.getShiftedReconstructionJSON(id).then((results) => {\n      dispatch(changeShiftedReconstructionSuccess(results));\n    });\n  };\n}\n\n/**\n * Changes the shift rec. exp. by changing the id & loading the new exp.\n *\n * @param {number} id the number of the experiment to be loaded.\n * @return {object} the action to be dispatched for this change.\n */\nexport function changeShiftedReconstruction(id) {\n  return function(dispatch) {\n    return DreamApi.getShiftedReconstructionJSON(id).then((results) => {\n      dispatch(changeDreamID(id));\n      dispatch(changeShiftedReconstructionSuccess(results));\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\n// Constants for Action calls\nexport const ADD_DREAMING_ELEMENT = 'ADD_DREAMING_ELEMENT';\nexport const UPDATE_DREAMING_ELEMENTS = 'UPDATE_DREAMING_ELEMENTS';\nexport const REMOVE_DREAMING_ELEMENT = 'REMOVE_DREAMING_ELEMENT';\nexport const CHANGE_DREAMING_ELEMENT_ITERATION =\n  'CHANGE_DREAMING_ELEMENT_ITERATION';\nexport const CHANGE_CARD_DIMENSIONS = 'CHANGE_CARD_DIMENSIONS';\nexport const CHANGE_SOFTMAX_STATUS = 'CHANGE_SOFTMAX_STATUS';\nexport const CHANGE_PROGRESS_PAGE = 'CHANGE_PROGRESS_PAGE';\nexport const CHANGE_TOP_WORDS_ITERATION = 'CHANGE_TOP_WORDS_ITERATION';\nexport const CHANGE_DREAM_ID = 'CHANGE_DREAM_ID';\nexport const LOAD_DREAM_SUCCESS = 'LOAD_DREAM_SUCCESS';\nexport const LOAD_ANNEALING_SUCCESS = 'LOAD_ANNEALING_SUCCESS';\nexport const LOAD_TOP_WORDS_SUCCESS = 'LOAD_TOP_WORDS_SUCCESS';\nexport const LOAD_SIMILAR_WORDS_SUCCESS = 'LOAD_SIMILAR_WORDS_SUCCESS';\nexport const LOAD_RECONSTRUCTION_SUCCESS = 'LOAD_RECONSTRUCTION_SUCCESS';\nexport const LOAD_SHIFTED_RECONSTRUCTION_SUCCESS =\n  'LOAD_SHIFTED_RECONSTRUCTION_SUCCESS';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Typography, Toolbar, AppBar, IconButton} from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport * as actions from '../actions';\n\n/**\n * Providing a TopBar for the application with some controls.\n */\nclass TopBar extends React.Component {\n  /**\n   * Adds card elements to the visualization once they have been uploaded.\n   *\n   * @param {object} event - the event that triggers this function, containing\n   * the file pointers.\n   */\n  addElement = (event) => {\n    for (const file of event.target.files) {\n      if (file) {\n        const reader = new window.FileReader();\n        reader.onload = (function(action) {\n          return function(e) {\n            action(JSON.parse(e.target.result));\n          };\n        })(this.props.actions.addDreamingElement);\n        reader.readAsText(file);\n      }\n    }\n  };\n\n  /**\n   * Resets the input of the fileupload so a file can be uploaded twice in a\n   * row.\n   *\n   * @param {object} event - the event that triggers this function, normally a\n   * click on the input element.\n   */\n  onInputClick = (event) => {\n    event.target.value = '';\n  }\n\n  /**\n   * Renders the top bar for the app to provide controls.\n   *\n   * @return {jsx} the top bar to be rendered.\n   */\n  render() {\n    return (\n      <AppBar position=\"fixed\" color=\"primary\">\n        <Toolbar variant='dense'>\n          <Typography variant=\"h6\" color=\"inherit\">\n            What does BERT dream of?\n          </Typography>\n          <Typography variant='caption' color=\"inherit\" className=\"appTitle\">\n            &nbsp;&nbsp;&nbsp;- by Alex Bäuerle (<a href=\"https://twitter.com/a13xba\">\n            @a13xba</a>) and James Wexler\n            (<a href=\"https://twitter.com/bengiswex\">@bengiswex</a>)\n            of <a href=\"https://pair.withgoogle.com/\">PAIR</a>.\n          </Typography>\n          <IconButton aria-label=\"github\" style={{color: 'white'}}\n            href=\"https://github.com/PAIR-code/interpretability/tree/master/text-dream\">\n            <GitHubIcon/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\n// Controls state of the Application\nTopBar.propTypes = {\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(TopBar);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {LinearProgress} from '@material-ui/core';\n\n/**\n * Providing a Card Component for the TopWords chart in different experiments.\n */\nclass Progress extends React.Component {\n  /**\n   * Rendering the Progress Bar.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <LinearProgress variant='determinate' className='progress'\n        value={this.props.progress.page / this.props.progress.of * 100} />\n    );\n  }\n}\n\nProgress.propTypes = {\n  progress: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    progress: state.progress,\n  };\n}\n\nexport default connect(mapStateToProps)(Progress);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid} from '@material-ui/core';\n\n/**\n * Displaying the heading for this step in the explainable.\n */\nclass GenericHeading extends React.Component {\n  /**\n   * Renders the heading.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem'>\n        <h1>\n          {this.props.title}\n        </h1>\n      </Grid>\n    );\n  }\n}\n\nGenericHeading.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default GenericHeading;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass FeatureVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className=\"explanationItem overflow\">\n        <p className=\"normalText\">\n          <a href=\"https://distill.pub/2017/feature-visualization/\">\n            Feature Visualization\n          </a>{\" \"}\n          is a common tool for interpretability of neural networks. The ideas of\n          feature visualization are borrowed from{\" \"}\n          <a href=\"https://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html\">\n            Deep Dream\n          </a>\n          , where we can obtain inputs that excite the network by maximizing the\n          activation of neurons, channels, or layers of the network. This way,\n          we get an idea about which part of the network is looking for what\n          kind of input.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            classes={{ expanded: \"expandedPanel\" }}\n          >\n            Deep Dream\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className=\"smallText\">\n              In Deep Dream, inputs (pixels, when used on images) are changed\n              through gradient descent to maximize activation values. This can\n              be thought of as similar to the initial training process, where\n              through many iterations, we try to optimize a mathematical\n              equation. But instead of updating network parameters, Deep Dream\n              updates the input sample. What this leads to is somewhat\n              psychedelic but very interesting images, that can reveal to what\n              kind of input these neurons react.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <p className=\"normalText\">\n          This explainable provides visual insight into how we adapted the\n          techniques of feature visualization to text-based models. Along this\n          line, we{\" \"}\n          <a href=\"https://github.com/PAIR-code/interpretability/tree/master/text-dream/webapp\">\n            visually illustrate\n          </a>{\" \"}\n          this process, and explore reasons for why feature visualization does\n          not work as well for text. We also publish{\" \"}\n          <a href=\"https://github.com/PAIR-code/interpretability/tree/master/text-dream/python\">\n            tools\n          </a>{\" \"}\n          to explore this direction further.\n        </p>\n        <p className=\"normalText\">\n          Our experiments have been conducted with{\" \"}\n          <a href=\"https://arxiv.org/pdf/1810.04805.pdf\">BERT</a>, a neural\n          network published by Google in 2018. BERT excels in natural language\n          understanding. It can be used for multiple different tasks, such as\n          sentiment analysis or next sentence prediction, and has{\" \"}\n          <a href=\"https://www.blog.google/products/search/search-language-understanding-bert/\">\n            recently been integrated into Google Search\n          </a>\n          . We visualize the output neurons of the transformer encoder layers\n          within BERT. If you want to learn more about transformers, we\n          recommend this{\" \"}\n          <a href=\"http://jalammar.github.io/illustrated-transformer/\">\n            blog post\n          </a>\n          .\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default FeatureVisTexts;\n","import React from 'react';\nimport {Grid, Tooltip} from '@material-ui/core';\nimport MathJax from 'react-mathjax2';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass TextSpecialtyTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          When dreaming for images, the input to the model is\n          gradually changed. Language, however,\n          is made of discrete structures, i.e.\n          tokens, which represent words, or word-pieces. Thus, there is no\n          such gradual change to be\n          made<Tooltip title={<span className='styledTooltip'>\n            Looking at a single pixel in an input image,\n            such a change could be gradually going from green to red. The\n            green value would slowly go down, while the red value would\n            increase. In language, however, we can not slowly go from the\n            word 'green' to the word 'red', as everything in between does\n            not make sense.</span>}><sup>[i]</sup></Tooltip>.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}\n            classes={{expanded: 'expandedPanel'}}>\n                Word Embeddings\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className='smallText'>\n              Language models operate on embeddings of words. Using these\n              embeddings, words are converted into high-dimensional vectors\n              of continuous numbers. In this embedding space, words with\n              similar meanings are closer together than words with different\n              meanings. You might ask: \"Why can't we use these embeddings to\n              dream to?\" The answer is that there is often no mapping from\n              unconstrained embedding vectors back to real tokens. With Deep\n              Dream changing the embeddings rather than input tokens, we can\n              end up with embeddings that are nowhere close to any token.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <p className='normalText'>\n          To still be able to use Deep Dream, we have to utilize the\n          so-called softmax-trick, which has already been employed in\n          a <a href=\"https://www.aclweb.org/anthology/W18-5437\">\n            paper by Poerner et. al.\n          </a>. This trick was introduced\n          by <a href=\"https://arxiv.org/pdf/1611.01144.pdf\">\n            Jang et. al.\n          </a> and <a href=\"https://arxiv.org/pdf/1611.00712.pdf\">\n            Maddison et. al.\n          </a>.\n          It allows us to soften the requirement for discrete inputs, and\n          instead use a linear combination of tokens as input to the model.\n          To assure that we do not end up with something crazy, it uses two\n          mechanisms. First, it constrains this linear combination so that\n          the linear weights sum up to one. This, however, still leaves the\n          problem that we can end up with any linear combination of such\n          tokens, including ones that are not close to real tokens in the\n          embedding space. Therefore, we also make use of a temperature\n          parameter, which controls the sparsity of this linear combination.\n          By slowly decreasing this temperature value, we can make the model\n          first explore different linear combinations of tokens, before\n          deciding on one token. You can experiment with this mechanism in this\n          visualization.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}\n            classes={{expanded: 'expandedPanel'}}>\n                Softmax Trick\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <MathJax.Context input='tex'>\n              <p className='smallText'>\n                The trick does two things. To ensure that we sum up to one\n                for the linear combination of tokens, it takes the softmax\n                function over the smooth input token distribution. However,\n                before applying the softmax function, we divide our token\n                distribution vector by a temperature value,\n                i.e. <MathJax.Node inline>\n                  softmax(token\\_distribution / t)\n                </MathJax.Node>. Dividing by large\n                temperature values means that the softmax result will be\n                smooth, whereas dividing by small temperature values results\n                in a more spiky softmax function.\n              </p>\n            </MathJax.Context>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </Grid>\n    );\n  }\n}\n\nexport default TextSpecialtyTexts;\n","import React from 'react';\nimport {Grid, Tooltip} from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass BertResultsTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          Now that we know how Deep Dream can be used in combination with\n          text models, what do those results look like? Well, very\n          unpredictable. For some neurons it was possible to produce\n          sentences that highly activated them. However, for other neurons\n          we weren&apos;t able to dream such sentences\n          <Tooltip title={<span className='styledTooltip'>\n            As a baseline for all experiments, we used results from corpus\n            search. Here, we searched through a large corpus of sentences\n            and looked into which one activates the neuron of interest most.\n            We always started the process with one of the top 10 sentences\n            from this corpus, as this approach has a lot more freedom to\n            change words and thus should be able to get to higher\n            activations than corpus search\n            alone.</span>}><sup>[i]</sup></Tooltip>.\n          When changing single words, the model sometimes found one that led\n          to a high activation, but not always. For whole sentences, the\n          success rate was reduced even more. This meant that our idea of\n          feature visualization for text was not working.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}\n            classes={{expanded: 'expandedPanel'}}>\n                Changing Words with BERT\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className='smallText'>\n              There are different options of which words to change using\n              Deep Dream. We always kept the CLS and SEP tokens static. CLS\n              is a special classification token used by BERT for some\n              downstream tasks, while SEP marks the end of a sentence. When\n              we allowed the model to change these tokens as well, it seemed\n              to be even more confused and the approach completely failed.\n              In between those special tokens, one can change anything from\n              one word to the whole sentence, albeit with mixed results.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <p className='normalText'>\n          The lack of success in dreaming words to highly activate specific\n          neurons was surprising to us. This method uses gradient descent\n          and seemed to work for other models (<a href=\"https://www.aclweb.org/anthology/W18-5437\">\n            see Poerner et. al. 2018</a>). However, BERT is a complex model,\n          arguably much more complex than the models that have been\n          previously investigated with this method.\n        </p>\n        <p className='normalText'>\n          So, why is BERT such a bad dreamer? This is a question we tried to\n          answer <a href=\"https://pair.withgoogle.com/\">\n          PAIR</a>-style, by providing explainability approaches to visually\n          inspect those dreaming results\n          <Tooltip title={<span className='styledTooltip'>\n            We used these tools to reason about our approaches with BERT,\n            but if you run into similar problems, feel free to use them with\n            any model. All tools presented within this are publicly\n            available on GitHub.</span>}><sup>[i]</sup></Tooltip>.\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default BertResultsTexts;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass DreamVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className=\"explanationItem overflow\">\n        <p className=\"normalText\">\n          The first question we wanted to answer for these dreaming processes is\n          how the input representation evolves. Here it is interesting to look\n          at:\n        </p>\n        <ol className=\"normalText\">\n          <li>\n            <p>When and how the model replaces certain words.</p>\n          </li>\n          <li>\n            <p>\n              How the activation value of the neuron we are trying to maximize\n              evolves.\n            </p>\n          </li>\n          <li>\n            <p>\n              How the activation value would evolve if we always just picked the\n              top-ranked token instead of the softmax combination we use during\n              optimization.\n            </p>\n          </li>\n          <li>\n            <p>\n              How these interact with the change of temperature (explained{\" \"}\n              <Link to=\"/textspecial\">two steps back</Link>) which forces the\n              model to pick real tokens.\n            </p>\n          </li>\n        </ol>\n        <p className=\"normalText\">\n          As can be seen in this visualization, we were not able to consistently\n          get back to the same or a higher activation than what we started with.\n          This is despite this approach has a lot more freedom to change words\n          than corpus search. We had some ideas on why this might not always\n          work as expected:\n        </p>\n        <ol className=\"normalText\">\n          <li>\n            <p>\n              Temperature annealing seems to first, allow the model to pick any\n              linear combination of tokens, before gradually reducing the number\n              of tokens used for this linear combination. What if some tokens\n              get removed from the combination but would highly activate the\n              neuron in isolation?\n            </p>\n          </li>\n          <li>\n            <p>\n              What if the model is so specialized that a neuron is highly\n              activated by some specific token but not by that token's neighbors\n              in embedding space?\n            </p>\n          </li>\n        </ol>\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            classes={{ expanded: \"expandedPanel\" }}\n          >\n            Easier Conditions\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className=\"smallText\">\n              To look at these processes and what might go wrong here, we made\n              the problem easier by having it only change one word in the input\n              sentence. While the probability of getting to a high activation\n              value is higher than when changing the whole sentence, it still\n              did not work out all the time.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </Grid>\n    );\n  }\n}\n\nexport default DreamVisTexts;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass AnnealingVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          To investigate our first idea for why BERT might have problems\n          with dreaming, we wanted to see how the annealing progresses.\n          Here, we were interested in how the softmax token-distribution\n          changed throughout the process.\n          We see how the model first uses a linear combination of many tokens to\n          get to activation values that could not be achieved with any single\n          token alone.\n          Then, the model is forced by the temperature value to reduce this bag\n          of tokens, whereas the number of tokens used for the linear\n          combination is reduced step-by-step.\n          In many cases, the model cannot switch back to a single, highly\n          activating token after this reduction.\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default AnnealingVisTexts;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass TopWordsVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          It is also interesting to look at this in combination with the top\n          activations for a specific word position. We can do that by\n          checking the activation for each word in the vocabulary.\n          Interestingly, often none of\n          the tokens that have high weights in the linear combination of\n          tokens to input into the model can be found in these top\n          activating ones. This shows one possible problem with this method\n          and supports our theory that sometimes the annealing process\n          removes highly activating tokens from the set of tokens that can\n          be selected by the dreaming process.\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default TopWordsVisTexts;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass SimilarVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className=\"explanationItem overflow\">\n        <p className=\"normalText\">\n          Another possible reason this method doesn't always lead to the desired\n          results is that the optimization problem is hard. A reason for this\n          could be that the model's neurons are highly specialized on certain\n          tokens, while all the tokens around it might not activate the neuron\n          as much. To explore this possibility, we developed another\n          visualization that allows us to look at activations for tokens that\n          are close to the token we know highly activates the neuron. We see\n          that just because a word is close in the embedding-space to a word we\n          know produces a high activation, does not mean that it also highly\n          activates the neuron. This could be an indication that some neurons\n          are so specialized that it gets extremely hard to find optima using\n          gradient descent, and might indeed be another reason for why these\n          dreaming approaches sometimes fail to produce the expected results.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            classes={{ expanded: \"expandedPanel\" }}\n          >\n            Distance Calculation\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className=\"smallText\">\n              For this visualization, distance is calculated in embedding space.\n              We get the high-dimensional representation of the token we are\n              looking at as well as the most activating token, and then take the\n              euclidian distance to figure out how close the tokens are to each\n              other.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </Grid>\n    );\n  }\n}\n\nexport default SimilarVisTexts;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass ReconstructVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          To test the general applicability of this approach in a simpler\n          setting, we tried to reconstruct activations instead of maximizing\n          them. For this experiment, we fed a sentence into the network,\n          saved the activation for a specific layer, and then tried to get\n          back to this initial sentence using Deep Dream.\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}\n            classes={{expanded: 'expandedPanel'}}>\n                Experiment Details\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className='smallText'>\n              Instead of looking for single neurons, we reconstructed the\n              activation for the entire layer. As an initial input for the\n              optimization problem, we used a random input sentence with the\n              same length as the target sentence. We then used the same\n              technique of changing the input to the network through\n              gradient descent. This time, the optimization target was to\n              minimize the difference between our saved activation and the\n              input to the network. We used the same sentence for every\n              layer, to see how this unfolds in different stages of the\n              network.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <p className='normalText'>\n          Surprisingly, these experiments seem to work comparably well. Even\n          more interesting: this indicates not only that our approach has no\n          major conceptual flaws, but reveals additional insight into the\n          workings of BERT.\n        </p>\n        <p className='normalText'>\n          One such insight is that it seems to be easier to completely\n          reconstruct the activation for earlier layers. Layers that take on\n          later processing steps are consistently harder to reconstruct.\n          Another interesting analysis is to look at which words get\n          replaced in each of the layers. While some words cannot be\n          reconstructed relatively early, which indicates that they might\n          not be as important, others are replaced by conceptually similar\n          words, which hints at how the model is able to reason about\n          language. Other, seemingly important words are consistently\n          reconstructed across all layers.\n        </p>\n        <p className='normalText'>\n          All in all, this experiment provided more insight than we\n          initially expected, which led us to build on this and try\n          something similar.\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default ReconstructVisTexts;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass ShiftVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n          If reconstructing activations works, what happens if we change\n          some activations before reconstruction? To investigate potential bias in such models, we\n          wanted to make meaningful changes to the activations and look into\n          what the model makes of these changes during reconstruction. Thus,\n          we changed activations of gender-specific words in the directions\n          of their counterparts, e.g. \"he\" in the direction of \"she\".\n        </p>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}\n            classes={{expanded: 'expandedPanel'}}>\n                Technical Details\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <p className='smallText'>\n              Performing such changes can be done with some preprocessing.\n              First, we gathered sentences for two concepts we want to test\n              bias for. Then, we fed all these sentences through the network\n              and saved the activation value for the concept-word in each\n              layer. This gave us a representation of both concepts per\n              layer. To then find a direction to reasonably change the\n              activation towards, we\n              used <a href=\"https://arxiv.org/pdf/1711.11279.pdf\">Concept\n              Activation Vectors (CAV)</a>. Thus, we trained linear\n              classifiers between activations for both concepts. The vector\n              that is orthogonal to the classification boundary could then\n              be used as the direction to shift the activation by simply\n              adding it to the original activation value. To follow this\n              idea, we used a corpus of sentences containing male and female\n              pronouns, namely \"he\" and \"she\". After obtaining the CAV for\n              these concepts, we use the same approach of reconstructing\n              activations as before. The only difference here is, that the\n              activation that is to be reconstructed gets changed before the\n              reconstruction process. To be more precise, we change the\n              activation that we retrieved for a sentence at the position of\n              a pronoun. The activations of all the other tokens are kept\n              the same.\n            </p>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <p className='normalText'>\n          Interestingly, not only did a change occur during reconstruction\n          of the token we shifted the activation for, but also for some of\n          the tokens for which the activations were untouched. Most exciting\n          was that sometimes the token \"her\" changed to \"his\", which matches the\n          direction we shifted the pronoun token. Thus, even though we only\n          changed the pronoun, this was so important for the model, that\n          other tokens could be changed on this basis. On the other hand, we\n          were not able to find even stronger indications of bias, where for\n          example, the model would change the word \"baseball\" so something\n          it understands as more \"female\". Also, as with all the other\n          experiments we conducted, the results were neither completely\n          reproducible nor predictable.\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default ShiftVisTexts;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\n/**\n * Displaying the text for this step in the explainable.\n */\nclass ConclusionVisTexts extends React.Component {\n  /**\n   * Renders the text.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item className='explanationItem overflow'>\n        <p className='normalText'>\n            This explainable shows experiments aimed at looking into what a deep\n            transformer language model, namely BERT, has learned. Although\n            our attempts didn't work as well as we were hoping, we got some\n            interesting insights into how a language model builds up its\n            understanding of text using these methods. Thus, we are not\n            giving up, and hope that one day we can understand what\n            individual components of text models have learned through\n            approaches like these. To support further research in this\n            direction, we open-sourced all\n            our <a href=\"https://github.com/PAIR-code/interpretability/tree/master/text-dream/python\">code</a> and <a href=\"https://github.com/PAIR-code/interpretability/tree/master/text-dream/webapp\">visualizations</a>.\n        </p>\n        <p className='normalText'>\n          <span>\n              Many thanks to Martin Wattenberg, Nina Poerner, and Ian Tenney\n              for helpful feedback and discussions about this research, and\n              to David Weinberger for editorial input.\n          </span>\n        </p>\n      </Grid>\n    );\n  }\n}\n\nexport default ConclusionVisTexts;\n","import React from 'react';\n\nimport {Grid, Button} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport NavigateNext from '@material-ui/icons/NavigateNext';\n\n/**\n * Displaying the buttons for this step in the explainable.\n */\nclass FeatureVisButtons extends React.Component {\n  /**\n   * Renders the buttons.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item container direction='row' justify='center' spacing={2}>\n        <Grid item>\n          <Link to='/textspecial'>\n            <Button variant='contained' color='secondary'\n              endIcon={<NavigateNext/>}>\n              Start Exploring\n            </Button>\n          </Link>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default FeatureVisButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Button} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport NavigateNext from '@material-ui/icons/NavigateNext';\nimport NavigateBefore from '@material-ui/icons/NavigateBefore';\n\n/**\n * Displaying the buttons for this step in the explainable.\n */\nclass BothButtons extends React.Component {\n  /**\n   * Renders the buttons.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item container direction='row' justify='center' spacing={2}>\n        <Grid item>\n          <Link to={this.props.prev}>\n            <Button variant='contained' color='secondary'\n              endIcon={<NavigateBefore/>}>\n              Back\n            </Button>\n          </Link>\n        </Grid>\n        <Grid item>\n          <Link to={this.props.next}>\n            <Button variant='contained' color='secondary'\n              endIcon={<NavigateNext/>}>\n              Next\n            </Button>\n          </Link>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nBothButtons.propTypes = {\n  prev: PropTypes.string.isRequired,\n  next: PropTypes.string.isRequired,\n};\n\nexport default BothButtons;\n","import React from 'react';\n\nimport {Grid, Button} from '@material-ui/core';\nimport {Link} from 'react-router-dom';\nimport NavigateBefore from '@material-ui/icons/NavigateBefore';\n\n/**\n * Displaying the buttons for this step in the explainable.\n */\nclass BothButtons extends React.Component {\n  /**\n   * Renders the buttons.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item container direction='row' justify='center' spacing={2}>\n        <Grid item>\n          <Link to='/shiftvis'>\n            <Button variant='contained' color='secondary'\n              endIcon={<NavigateBefore/>}>\n              Back\n            </Button>\n          </Link>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default BothButtons;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass FeatureVisIllustration extends React.Component {\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item xs className='explanationItem'>\n        <img\n          src=\"https://2.bp.blogspot.com/-17ajatawCW4/VYITTA1NkDI/AAAAAAAAAlM/eZmy5_Uu9TQ/s1600/classvis.png\"\n          className='slim'\n          alt='Deep Dream'/>\n        <div className=\"caption-slim\">\n          <p>\n            Examples for Deep Dream processes with images from the\n            original Deep\n            Dream <a href=\"https://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html\">\n            blogpost\n            </a>.\n            Here, they take a randomly initialized image and use Deep\n            Dream to transform the image by maximizing the activation\n            of the corresponding output neuron.\n            This can show what a network has learned about different\n            classes or for individual neurons.\n          </p>\n        </div>\n      </Grid>\n    );\n  }\n}\n\nexport default FeatureVisIllustration;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Grid, TextField, Slider} from '@material-ui/core';\n\nimport * as actions from '../../actions';\n\n/**\n * Providing a Card Component for the TopWords chart in different experiments.\n */\nclass Softmax extends React.PureComponent {\n  /**\n   * Calculating the softmax of an array with a temperature.\n   *\n   * @param {array} arr the array to be softmaxed\n   * @param {float} temp the temperature to be applied\n   * @return {array} softmaxed and tempered array\n   */\n  softmaxTemp(arr, temp) {\n    const C = Math.max(...arr);\n    const d = arr.map((y) => Math.exp((y / temp) - C)).reduce((a, b) => a + b);\n    return arr.map((value, index) => {\n      const result = Math.exp((value / temp) - C) / d;\n      return Math.round((result + Number.EPSILON) * 100) / 100;\n    });\n  }\n\n  /**\n   * Handling a change of the slider value.\n   *\n   * @param {object} e the event of the change\n   * @param {number} val the new slider value\n   */\n  handleChange = (e, val) => {\n    const softmaxStatus = JSON.parse(JSON.stringify(this.props.softmaxStatus));\n    softmaxStatus.temperature = val;\n    this.props.actions.changeSoftmaxStatus(softmaxStatus);\n  };\n\n  /**\n   * Rendering the chart card.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const softmaxed = this.softmaxTemp(this.props.softmaxStatus.values, 1.0);\n    const tempered = this.softmaxTemp(this.props.softmaxStatus.values,\n        this.props.softmaxStatus.temperature);\n    return (\n      <Grid container direction='column' spacing={2}>\n        <Grid item container justify='center' spacing={2}>\n          <Grid item xs={2}>\n          Temperature:\n          </Grid>\n          <Grid item xs>\n            <Slider step={0.1} min={0.01} max={2}\n              value={this.props.softmaxStatus.temperature}\n              valueLabelDisplay=\"on\" onChange={this.handleChange}/>\n          </Grid>\n        </Grid>\n        <Grid item container justify='center' spacing={2}>\n          <Grid item xs={2}>\n            Word Score:\n          </Grid>\n          { this.props.softmaxStatus.values.map((status, index) => {\n            return <Grid item xs={2} key={index}>\n              <TextField label={this.props.softmaxStatus.labels[index]}\n                value={status} onChange={(e) => {\n                  const softmaxStatus = JSON.parse(JSON.stringify(\n                      this.props.softmaxStatus));\n                  const newValue = isNaN(parseFloat(e.target.value)) ? 0.0 :\n                      parseFloat(e.target.value);\n                  softmaxStatus.values[index] = newValue;\n                  this.props.actions.changeSoftmaxStatus(softmaxStatus);\n                }}/>\n            </Grid>;\n          })}\n        </Grid>\n        <Grid item container justify='center' spacing={2}>\n          <Grid item xs={2}>\n            Softmax Score:\n          </Grid>\n          { softmaxed.map((status, index) => {\n            return <Grid item xs={2} key={index}>\n              {status}\n            </Grid>;\n          })}\n        </Grid>\n        <Grid item container justify='center' spacing={2}>\n          <Grid item xs={2}>\n            With Temp.:\n          </Grid>\n          { tempered.map((status, index) => {\n            return <Grid item xs={2} key={index}>\n              {status}\n            </Grid>;\n          })}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nSoftmax.propTypes = {\n  softmaxStatus: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    softmaxStatus: state.softmaxStatus,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Softmax);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\n\nimport Softmax from '../../cards/SoftmaxComponent';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass TextSpecialtyIllustration extends React.Component {\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <Grid item xs className='explanationItem'>\n        <Softmax/>\n      </Grid>\n    );\n  }\n}\n\nexport default TextSpecialtyIllustration;\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {\n  getDreamExperimentExplanation,\n} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass DreamVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadDream(this.props.dreamID);\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const dreamingCard = getCard(this.props.dreamVisJSON, 0,\n        getDreamExperimentExplanation(this.props.dreamID),\n        ['temperature', 'activation', 'ids_activation']);\n    return (\n      <Grid item xs className='fullHeight'>\n        {dreamingCard}\n      </Grid>\n    );\n  }\n}\n\nDreamVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  dreamVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    dreamVisJSON: state.dreamVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps,\n    mapDispatchToProps)(DreamVisIllustration);\n","/**\n * Returns the explanation for the currently selected dream experiment.\n *\n * @param {number} index the index of the currently selected dream experiment.\n * @return {string} the explanation for the currently selected dream experiment.\n */\nexport function getDreamExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'In this experiment. The process first finds a linear combination of ' +\n    'tokens which leads to a high activation value. However, after reducing ' +\n    'the temperature, it is not able to get back to the original activation ' +\n    'anymore.',\n    'As with the first experiment, here we are not able to find a word that ' +\n    'leads to the same or a higher activation than what we started with.',\n    'This is an example of a more successful run. Here, we are able to go ' +\n    'back to the same high activation value as we started with. In a later ' +\n    'visualization, we will see that this is the highest possible activation ' +\n    'for this neuron.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n\n/**\n * Returns the explanation for the currently selected anneal experiment.\n *\n * @param {number} index the index of the currently selected anneal experiment.\n * @return {string} explanation for the currently selected anneal experiment.\n */\nexport function getAnnealExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'None of the words that individually highly activate the neuron are ' +\n    'in the top-ranked for most of the iterations. We suspect this is the ' +\n    'reason why the model cannot get to a high activation when the ' +\n    'temperature is lowered.',\n    'None of the words that individually highly activate the neuron are ' +\n    'in the top-ranked for most of the iterations. We suspect this is the ' +\n    'reason why the model cannot get to a high activation when the ' +\n    'temperature is lowered.',\n    'We see how the word \"anger\" is continually in the top-ranked words. ' +\n    'This might be why the model can later select this word to get a high ' +\n    'activation.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n\n/**\n * Returns the explanation for the currently selected anneal experiment.\n *\n * @param {number} index the index of the currently selected anneal experiment.\n * @return {string} explanation for the currently selected anneal experiment.\n */\nexport function getTopWordsExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'Even though for is not the word with the highest activation value, ' +\n    'feature visualization can\\'t reproduce this activation.',\n    'The word we start with, \"match\", is only the third-highest activating ' +\n    'word. Still, we are not able to get to the same, or a higher activation ' +\n    'through feature visualization.',\n    'We see that the word we started with, \"anger\", is the highest activating ' +\n    'word for this neuron.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n\n/**\n * Returns the explanation for the currently selected similar experiment.\n *\n * @param {number} index the index of the currently selected similar experiment.\n * @return {string} explanation for the currently selected similar experiment.\n */\nexport function getSimilarExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'Words that are similar to our start word \"for\" have a significantly ' +\n    'lower activation value. This might make optimization hard.',\n    'There are words that are close to our start word that lead to similar ' +\n    'high activation values, however, the process still fails during ' +\n    'optimization.',\n    'Even though in this case, the optimization process is successful, no ' +\n    'words that are close to our start word in embedding space lead to high ' +\n    'activation values.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n\n/**\n * Returns the explanation for the currently selected reconstruct experiment.\n *\n * @param {number} index index of the currently selected reconstruct experiment.\n * @return {string} explanation for currently selected reconstruct experiment.\n */\nexport function getReconstructExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'We can see that connections such as the word \"for\", ' +\n    'commas, and the word \"and\" get replaced with seemingly random ' +\n    'words early. This might be because these words are not ' +\n    'critical to understand the meaning of the sentence. ' +\n    'Other words, such as \"duties\", ' +\n    '\"include\", and \"sites\" are replaced by conceptually similar ' +\n    'words, such as \"interests\", \"reflect\", and \"venues\" in some of ' +\n    'the layers that preserve the overall ' +\n    'meaning of the sentence. Interestingly, some important ' +\n    'words are consistently reconstructed across all layers.',\n    'Again, the first thing getting replaced is the \".\" at the end of the ' +\n    'sentence, which is not important for a general understanding of the sentence. ' +\n    'Additionally \"no\" gets replaced with \"nothing\", \"neither\", and \"nobody\" ' +\n    'at different stages of the optimization, which are all similar to \"no\".',\n    'The model first replaces irrelevant words such as \"the\" and \"of\", but  ' +\n    'also \"he\", indicating that gender is not important here. Then, we again ' +\n    'see replacements with similar words, before only the most important ' +\n    'words, such as \"anger\" and \"defeat\" can be reconstructed.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n\n/**\n * Returns the explanation for the currently selected shift experiment.\n *\n * @param {number} index index of the currently selected shift experiment.\n * @return {string} explanation for currently selected shift experiment.\n */\nexport function getShiftExperimentExplanation(index) {\n  const dreamExperimentExplanations = [\n    'Through the activation shift, the model indeed reconstructs \"he\" for ' +\n    'some layers. Looking at layer 4 in detail, we see that the model even ' +\n    'sometimes swaps our \"her\" for \"his\".',\n    'While we can, again, bring the model to replace the pronoun, it does not' +\n    'seem like there is enough bias to then also flip the unchanged word ' +\n    '\"doctor\".',\n    'This sentence has gender dependencies in more than one place, which ' +\n    'even prevents ' +\n    'the targeted pronoun flip which worked in both of the other experiments.',\n  ];\n  return dreamExperimentExplanations[index - 1];\n}\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {\n  getAnnealExperimentExplanation,\n} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass AnnealingVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadAnnealing(this.props.dreamID);\n    const cardElement = document.getElementById('cardItem');\n    if (cardElement != null) {\n      this.props.actions.changeCardDimensions({\n        'width': cardElement.getBoundingClientRect().width,\n        'height': cardElement.getBoundingClientRect().height,\n      });\n    }\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const annealingCard = getCard(this.props.annealingVisJSON, 0,\n        getAnnealExperimentExplanation(this.props.dreamID),\n        ['softmax']);\n    return (\n      <Grid item xs className='fullHeight' id='cardItem'>\n        {annealingCard}\n      </Grid>\n    );\n  }\n}\n\nAnnealingVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  annealingVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    annealingVisJSON: state.annealingVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps,\n    mapDispatchToProps)(AnnealingVisIllustration);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {\n  getTopWordsExperimentExplanation,\n} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass TopWordsVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadTopWords(this.props.dreamID);\n    const cardElement = document.getElementById('cardItem');\n    if (cardElement != null) {\n      this.props.actions.changeCardDimensions({\n        'width': cardElement.getBoundingClientRect().width,\n        'height': cardElement.getBoundingClientRect().height,\n      });\n    }\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const topWordsCard = getCard(this.props.topWordsVisJSON, 0,\n        getTopWordsExperimentExplanation(this.props.dreamID), ['activation']);\n    return (\n      <Grid item xs className='fullHeight' id='cardItem'>\n        {topWordsCard}\n      </Grid>\n    );\n  }\n}\n\nTopWordsVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  topWordsVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    topWordsVisJSON: state.topWordsVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps,\n    mapDispatchToProps)(TopWordsVisIllustration);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {\n  getSimilarExperimentExplanation,\n} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass SimilarVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadSimilarWords(this.props.dreamID);\n    const cardElement = document.getElementById('cardItem');\n    if (cardElement != null) {\n      this.props.actions.changeCardDimensions({\n        'width': cardElement.getBoundingClientRect().width,\n        'height': cardElement.getBoundingClientRect().height,\n      });\n    }\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const similarCard = getCard(this.props.similarVisJSON, 0,\n        getSimilarExperimentExplanation(this.props.dreamID), ['activation',\n          'distance']);\n    return (\n      <Grid item xs className='fullHeight' id='cardItem'>\n        {similarCard}\n      </Grid>\n    );\n  }\n}\n\nSimilarVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  similarVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    similarVisJSON: state.similarVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimilarVisIllustration);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {\n  getReconstructExperimentExplanation,\n} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass ReconstructVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadReconstruction(this.props.dreamID);\n    const cardElement = document.getElementById('cardItem');\n    if (cardElement != null) {\n      this.props.actions.changeCardDimensions({\n        'width': cardElement.getBoundingClientRect().width,\n        'height': cardElement.getBoundingClientRect().height,\n      });\n    }\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const reconstructCard = getCard(this.props.reconstructVisJSON, 0,\n        getReconstructExperimentExplanation(this.props.dreamID),\n        ['temperature', 'loss', 'ids_loss']);\n    return (\n      <Grid item xs className='fullHeight' id='cardItem'>\n        {reconstructCard}\n      </Grid>\n    );\n  }\n}\n\nReconstructVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  reconstructVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    reconstructVisJSON: state.reconstructVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps,\n    mapDispatchToProps)(ReconstructVisIllustration);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {getCard} from '../../../cardprocessing';\nimport * as actions from '../../../actions';\nimport {getShiftExperimentExplanation} from '../../../data/ExperimentExplanationTexts';\n\n/**\n * Displaying the illustration for this step in the explainable.\n */\nclass ShiftVisIllustration extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.loadShiftedReconstruction(this.props.dreamID);\n    const cardElement = document.getElementById('cardItem');\n    if (cardElement != null) {\n      this.props.actions.changeCardDimensions({\n        'width': cardElement.getBoundingClientRect().width,\n        'height': cardElement.getBoundingClientRect().height,\n      });\n    }\n  }\n\n  /**\n   * Renders the illustration.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    const shiftCard = getCard(this.props.shiftVisJSON, 0,\n        getShiftExperimentExplanation(this.props.dreamID),\n        ['loss', 'ids_loss']);\n    return (\n      <Grid item xs className='fullHeight' id='cardItem'>\n        {shiftCard}\n      </Grid>\n    );\n  }\n}\n\nShiftVisIllustration.propTypes = {\n  actions: PropTypes.object.isRequired,\n  dreamID: PropTypes.number.isRequired,\n  shiftVisJSON: PropTypes.object.isRequired,\n};\n\n/**\n * Mapping the state that this component needs to its props.\n *\n * @param {object} state - the application state from where to get needed props.\n * @param {object} ownProps - optional own properties needed to acess state.\n * @return {object} the props for this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    dreamID: state.dreamID,\n    shiftVisJSON: state.shiftVisJSON,\n  };\n}\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps,\n    mapDispatchToProps)(ShiftVisIllustration);\n","import React from 'react';\n\nimport GenericHeading from '../components/views/headings/GenericHeading';\n\nimport FeatureVisTexts from '../components/views/texts/FeatureVisText';\nimport TextSpecialtyTexts from '../components/views/texts/TextSpecialtyText';\nimport BertResultsTexts from '../components/views/texts/BertResultsText';\nimport DreamVisTexts from '../components/views/texts/DreamVisText';\nimport AnnealingVisTexts from '../components/views/texts/AnnealingVisText';\nimport TopWordsVisTexts from '../components/views/texts/TopWordsVisText';\nimport SimilarVisTexts from '../components/views/texts/SimilarVisText';\nimport ReconstructVisTexts from '../components/views/texts/ReconstructVisText';\nimport ShiftVisTexts from '../components/views/texts/ShiftVisText';\nimport ConclusionVisTexts from '../components/views/texts/ConclusionVisText';\n\nimport FeatureVisButtons from '../components/views/buttons/FeatureVisButtons';\nimport BothButtons from '../components/views/buttons/BothButtons';\nimport ConclusionButtons from '../components/views/buttons/ConclusionButtons';\n\nimport FeatureVisIllustration from\n  '../components/views/illustrations/FeatureVisIllustration';\nimport TextSpecialtyIllustration from\n  '../components/views/illustrations/TextSpecialtyIllustration';\nimport DreamVisIllustration from\n  '../components/views/illustrations/DreamVisIllustration';\nimport AnnealingVisIllustration from\n  '../components/views/illustrations/AnnealingVisIllustration';\nimport TopWordsVisIllustration from\n  '../components/views/illustrations/TopWordsVisIllustration';\nimport SimilarVisIllustration from\n  '../components/views/illustrations/SimilarVisIllustration';\nimport ReconstructVisIllustration from\n  '../components/views/illustrations/ReconstructVisIllustration';\nimport ShiftVisIllustration from\n  '../components/views/illustrations/ShiftVisIllustration';\n\n/**\n * Returns the view for the given view index.\n *\n * @param {number} index the index of the view to be retreived.\n * @return {object} the view elements that should be rendered for this index.\n */\nexport default function getViewData(index) {\n  return viewData[index];\n}\n\nconst viewData = [\n  {\n    heading: <GenericHeading title={'Feature Visualization for Text?'}/>,\n    texts: <FeatureVisTexts/>,\n    buttons: <FeatureVisButtons/>,\n    illustration: <FeatureVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Textual Models'}/>,\n    texts: <TextSpecialtyTexts/>,\n    buttons: <BothButtons prev={'/featurevis'} next={'/bertresults'}/>,\n    illustration: <TextSpecialtyIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Results with BERT'}/>,\n    texts: <BertResultsTexts/>,\n    buttons: <BothButtons prev={'/textspecial'} next={'/dreamvis'}/>,\n    illustration: null,\n  },\n  {\n    heading: <GenericHeading title={'Visualized Dreams'}/>,\n    texts: <DreamVisTexts/>,\n    buttons: <BothButtons prev={'/bertresults'} next={'/annealingvis'}/>,\n    illustration: <DreamVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Annealing Processes Visualized'}/>,\n    texts: <AnnealingVisTexts/>,\n    buttons: <BothButtons prev={'/dreamvis'} next={'/topvis'}/>,\n    illustration: <AnnealingVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Top Words Visualized'}/>,\n    texts: <TopWordsVisTexts/>,\n    buttons: <BothButtons prev={'/annealingvis'} next={'/similarvis'}/>,\n    illustration: <TopWordsVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Activations for Similar Words'}/>,\n    texts: <SimilarVisTexts/>,\n    buttons: <BothButtons prev={'/topvis'} next={'/reconstructvis'}/>,\n    illustration: <SimilarVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Reconstructing known Activations'}/>,\n    texts: <ReconstructVisTexts/>,\n    buttons: <BothButtons prev={'/similarvis'} next={'/shiftvis'}/>,\n    illustration: <ReconstructVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Reconstructing changed Activations'}/>,\n    texts: <ShiftVisTexts/>,\n    buttons: <BothButtons prev={'/reconstructvis'} next={'/conclusion'}/>,\n    illustration: <ShiftVisIllustration/>,\n  },\n  {\n    heading: <GenericHeading title={'Conclusion'}/>,\n    texts: <ConclusionVisTexts/>,\n    buttons: <ConclusionButtons/>,\n    illustration: null,\n  },\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\nimport {Grid} from '@material-ui/core';\nimport getViewData from '../data/ViewData';\n\nimport * as actions from '../actions';\n\n/**\n * Displaying the view for the current step in the explainable.\n */\nclass ViewStep extends React.Component {\n  /**\n   * Updating the page progress.\n   */\n  componentDidMount() {\n    this.props.actions.changeProgressPage(this.props.index + 1);\n  }\n\n  /**\n   * Renders the main component containing all the cards.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    let content = getViewData(this.props.index);\n    return (\n      <Grid container alignItems='center' spacing={2} className='fullHeight'\n        justify='center'>\n        <Grid item xs={6} container direction='column' spacing={2}\n          className='fullHeight' justify='center' wrap='nowrap'>\n          {content.heading}\n          {content.texts}\n          {content.buttons}\n        </Grid>\n        {content.illustration}\n      </Grid>\n    );\n  }\n}\n\nViewStep.propTypes = {\n  actions: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\n/**\n * Mapping the actions of redux to this component.\n *\n * @param {function} dispatch - called whenever an action is to be dispatched.\n * @return {object} all the actions bound to this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ViewStep);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport * as React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {CSSTransition} from 'react-transition-group';\nimport {Grid} from '@material-ui/core';\n\nimport TopBar from './components/TopBarComponent';\nimport Progress from './components/ProgressComponent';\nimport ViewStep from './components/ViewStepComponent';\n\n/**\n * AppRouter Calling other Components dependant on Route\n */\nclass AppRouter extends React.Component {\n  /**\n   * Rendering component dependant on route.\n   *\n   * @return {jsx} the component to be rendered.\n   */\n  render() {\n    return (\n      <div className='content'>\n        <Router basename=\"/interpretability/text-dream/explainable\">\n          <header>\n            <TopBar/>\n          </header>\n          <Grid container direction='column' className='fullHeight'>\n            <Progress />\n            <Grid item xs className='fullHeight'>\n              <div className='full'>\n                <Route exact path=\"/\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={0}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/featurevis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={0}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/textspecial\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={1}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/bertresults\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={2}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/dreamvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={3}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/annealingvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={4}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/topvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={5}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/similarvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={6}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/reconstructvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={7}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/shiftvis\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={8}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n                <Route exact path=\"/conclusion\">\n                  {({match}) => (\n                    <CSSTransition\n                      in={match != null}\n                      timeout={300}\n                      classNames=\"page\"\n                      unmountOnExit\n                    >\n                      <ViewStep index={9}/>\n                    </CSSTransition>\n                  )}\n                </Route>\n              </div>\n            </Grid>\n          </Grid>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default AppRouter;\n\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\n// Set the initial State of the Application\nexport default {\n  cardDimensions: {\n    width: 10,\n    height: 10,\n  },\n  softmaxStatus: {\n    values: [2.2, 0.8, 1.4, 1.0, 0.1],\n    labels: ['Dog', 'Cat', 'Monkey', 'Car', 'Truck'],\n    temperature: 1.0,\n  },\n  progress: {\n    page: 1,\n    of: 10,\n  },\n  topWordsIteration: 0,\n  dreamVisJSON: {},\n  dreamID: 1,\n  annealingVisJSON: {},\n  topWordsVisJSON: {},\n  similarVisJSON: {},\n  reconstructVisJSON: {},\n  shiftVisJSON: {},\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\n// Import all Reducers\nimport {combineReducers} from 'redux';\nimport cardDimensions from './CardDimensionsReducer';\nimport softmaxStatus from './SoftmaxReducer';\nimport progress from './ProgressReducer';\nimport topWordsIteration from './TopWordsIterationReducer';\nimport dreamID from './DreamIDReducer';\nimport dreamVisJSON from './DreamJSONReducer';\nimport annealingVisJSON from './AnnealingJSONReducer';\nimport topWordsVisJSON from './TopWordsJSONReducer';\nimport similarVisJSON from './SimilarWordsJSONReducer';\nimport reconstructVisJSON from './ReconstructionJSONReducer';\nimport shiftVisJSON from './ShiftJSONReducer';\n\n// Combine all Reducers\nexport default combineReducers({\n  cardDimensions,\n  softmaxStatus,\n  progress,\n  topWordsIteration,\n  dreamID,\n  dreamVisJSON,\n  annealingVisJSON,\n  topWordsVisJSON,\n  similarVisJSON,\n  reconstructVisJSON,\n  shiftVisJSON,\n});\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function cardDimensionsReducer(\n    state = initialState.cardDimensions, action) {\n  switch (action.type) {\n    case types.CHANGE_CARD_DIMENSIONS:\n      let dims = {\n        width: action.dimensions.width,\n        height: action.dimensions.height - 50,\n      }\n      return dims;\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the softmax trick vis state.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the action.\n */\nexport default function softmaxStatusReducer(\n    state = initialState.softmaxStatus, action) {\n  switch (action.type) {\n    case types.CHANGE_SOFTMAX_STATUS:\n      return action.status;\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the progress bar state.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the action.\n */\nexport default function progressReducer(\n    state = initialState.progress, action) {\n  switch (action.type) {\n    case types.CHANGE_PROGRESS_PAGE:\n      return {\n        ...state,\n        page: action.page,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the softmax trick vis state.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the action.\n */\nexport default function softmaxStatusReducer(\n    state = initialState.topWordsIteration, action) {\n  switch (action.type) {\n    case types.CHANGE_TOP_WORDS_ITERATION:\n      return action.iteration;\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function dreamReducer(\n    state = initialState.dreamID, action) {\n  switch (action.type) {\n    case types.CHANGE_DREAM_ID:\n      return action.id;\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function dreamReducer(\n    state = initialState.dreamVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_DREAM_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function annealingReducer(\n    state = initialState.annealingVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_ANNEALING_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function topWordsReducer(\n    state = initialState.topWordsVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_TOP_WORDS_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function similarWordsReducer(\n    state = initialState.similarVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_SIMILAR_WORDS_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function reconstructionReducer(\n    state = initialState.reconstructVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_RECONSTRUCTION_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * Reducer for updating the dimensions of displayed cards.\n *\n * @param {object} state - the current application state before any change.\n * @param {object} action - the action that is issued to manipulate the state.\n * @return {object} the state after handling the actiton.\n */\nexport default function shiftReducer(\n    state = initialState.shiftVisJSON, action) {\n  switch (action.type) {\n    case types.LOAD_SHIFTED_RECONSTRUCTION_SUCCESS:\n      return action.results\n    default:\n      return state;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport {grey} from '@material-ui/core/colors';\n\nimport AppRouter from './AppRouter';\nimport combinedReducers from './reducers';\n\n// Create the Store using all the Reducers and applying the Middleware\nconst store = createStore(\n    combinedReducers,\n    applyMiddleware(thunk),\n);\n\n// Application color theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: {light: grey[300], main: grey[900], dark: grey[700]},\n    secondary: {light: 'rgba(255, 179, 68, 0.1)',\n      main: 'rgba(255, 179, 68, 0.2)',\n      dark: 'rgba(255, 179, 68, 0.6)'},\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\n// Render the App\n// The App provides the Store to the following components.\n// Controls as well as Routed Content are rendered.\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <Provider store={store}>\n      <CssBaseline />\n      <AppRouter/>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\n/* eslint-disable no-undef */\n/* eslint-disable require-jsdoc */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS\n        // file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './styles/index.css';\n\n// Render the Application into the html 'root' element\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}